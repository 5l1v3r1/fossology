# Copyright (C) Siemens AG 2017
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

swagger: '2.0'
info:
  title: FOSSology API
  description: Automate your fossology instance using this API
  version: "2.0.0"
host: localhost
schemes:
  - https
basePath: /repo/api/v2
securityDefinitions:
  UserSecurity:
    type: basic
security:
  - UserSecurity: []

produces:
  - application/json
paths:
  /auth:
    get:
      summary: Get a login session registered
      description:
        Get a login session registered using the username and password
      parameters:
        - name: username
          required: true
          description: Username of the login user
          in: query
          type: string
        - name: password
          required: true
          description: Password of the user trying to login
          in: query
          type: string
      responses:
        200:
          description: Login successfull
          schema:
            type: string
        404:
          description: UserName or password incorrect

  /uploads/{id}:
    parameters:
      - name: id
        required: true
        description: Id of the upload
        in: path
        type: number
        format: int
    get:
      tags:
        - Upload
        - Organize
      summary: Get single upload by id
      description:
        Returns a single upload
      responses:
        200:
          description: Get upload
          schema:
            $ref: '#/definitions/Upload'
        400:
          description: Bad request, id NaN etc.
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Info'
    delete:
      tags:
        - Upload
        - Organize
      summary: Delete upload by id
      responses:
        202:
          description: Upload will be deleted
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad request, id NaN etc.
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Info'
    patch:
      tags:
        - Upload
        - Organize
      description: Move upload from one folder to other
      parameters:
        - name: folderId
          description: Folder Id, where upload should be moved to
          in: header
          required: true
          type: number
      responses:
        202:
          description: Upload will be moved
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad request, id NaN etc.
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Info'
    put:
      tags:
        - Upload
        - Organize
      description: Can be used to copy uploads
      parameters:
        - name: folderId
          description: Folder Id, where upload should be copied to
          in: header
          required: true
          type: number
      responses:
        202:
          description: Upload will be copied
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Id not found
          schema:
            $ref: '#/definitions/Info'

  /uploads:
    get:
      tags:
        - Upload
      summary: Uploads
      description: |
        The uploads endpoint returns all uploads
      responses:
        200:
          description: An array of uploads
          schema:
            type: array
            items:
              $ref: '#/definitions/Upload'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Info'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Info'
    post:
      tags:
        - Upload
      summary: Post new upload to FOSSology
      description: |
        Endpoint to create a new upload in FOSSology
      consumes:
        - multipart/form-data
      parameters:
        - name: fileInput
          required: true
          in: formData
          type: file
        - name: folderId
          description: Folder Id, where upload should be created
          in: header
          required: true
          type: number
        - name: uploadDescription
          description: Visible description of the file
          in: header
          required: false
          type: string
        - name: public
          description: The access level to the upload (default protected)
          in: header
          required: false
          type: string
          enum:
            - private
            - protected
            - public
        - name: scanOptions
          required: false
          in: body
          schema:
            $ref: '#/definitions/ScanOptions'
      responses:
        201:
          description: Upload is created
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to folder
          schema:
            $ref: '#/definitions/Info'
        500:
          description: Error while processing the upload
          schema:
            $ref: '#/definitions/Info'

  /search:
      get:
        tags:
          - Search
        description: Search the FOSSology for a specific file
        parameters:
          - name: searchType
            # use 'allfiles', if not given
            required: false
            description: Limit search to
            in: header
            type: string
            enum:
              - directory
              - containers
              - allfiles
          - name: filename
            description: Filename to find, can contain % as wild-card
            required: false
            in: header
            type: string
          - name: tag
            description: Tag to find
            required: false
            in: header
            type: string
          - name: filesizemin
            description: Min filesize in bytes
            required: false
            in: header
            type: number
          - name: filesizemax
            description: Max filesize in bytes
            required: false
            in: header
            type: number
          - name: license
            description: License search filter
            required: false
            in: header
            type: string
          - name: copyright
            description: Copyright search filter
            required: false
            in: header
            type: string
        responses:
          200:
            description: OK
            schema:
              type: array
              items:
                $ref: '#/definitions/SearchResults'
          400:
            description: Bad request, at least 1 parameter must be provider for search
            schema:
              $ref: '#/definitions/Info'
          401:
            description: Unauthorized, no authentification provided
            schema:
              $ref: '#/definitions/Info'
  /users:
      get:
        tags:
          - User
          - Admin
        description: Get the registered users
        responses:
          200:
            description: OK
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          401:
            description: Unauthorized, no authentification provided
            schema:
              $ref: '#/definitions/Info'
          403:
            description: Forbidden, no access to all users
            schema:
              $ref: '#/definitions/Info'
  /users/{id}:
    parameters:
        - name: id
          required: true
          in: path
          type: number
    get:
      tags:
        - User
        - Admin
      summary: Get user by id
      responses:
        200:
          description: User with the given id
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad request, id NaN etc.
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to all users
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Info'
    delete:
      tags:
        - User
        - Admin
      summary: Delete user by id
      responses:
        202:
          description: User will be deleted
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad request, id NaN etc.
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Info'
  /jobs:
      get:
        tags:
        - Job
        summary: Gets all jobs
        description: Returns all jobs with their status
        parameters:
          - name: limit
            required: false
            type: number
            format: int
            in: header
        responses:
          200:
            description: OK
            schema:
              type: array
              items:
                $ref: '#/definitions/Job'
          400:
            description: Bad request
            schema:
              $ref: '#/definitions/Info'
          401:
            description: Unauthorized, no authentification provided
            schema:
              $ref: '#/definitions/Info'
          403:
            description: Forbidden, no access to jobs
            schema:
              $ref: '#/definitions/Info'
      post:
        tags:
          - Job
        summary: Schedule an Analysis
        description:  Schedule an Analysis of an existing upload
        parameters:
          # This could also be omitted, because there are no real folders
          - name: folderId
            in: header
            required: true
            type: number
            format: int
          - name: uploadId
            in: header
            required: true
            type: number
            format: int
          - name: scan_options
            required: true
            in: body
            schema:
              $ref: '#/definitions/ScanOptions'
        responses:
          201:
            description: Job Scheduled with job id in message
            schema:
              $ref: '#/definitions/Info'
          400:
            description: Bad request
            schema:
              $ref: '#/definitions/Info'
          401:
            description: Unauthorized, no authentification provided
            schema:
              $ref: '#/definitions/Info'
          403:
            description: Forbidden, no access to job
            schema:
              $ref: '#/definitions/Info'
          404:
            description: Not found
            schema:
              $ref: '#/definitions/Info'
  /jobs/{id}:
    parameters:
      - name: id
        required: true
        description: Id of the job
        in: path
        type: number
        format: int
    get:
      tags:
      - Job
      summary: Gets single job by id
      description: Returns job with the status
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Job'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Info'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to jobs
          schema:
            $ref: '#/definitions/Info'

  /folders:
    get:
      tags:
      - Organize
      - Folders
      summary: Get the list of accessible folders
      responses:
        200:
          description: List of folders
          schema:
            type: array
            items:
              $ref: '#/definitions/Folder'
        403:
          description: Forbidden, no access to folders
          schema:
            $ref: '#/definitions/Info'
    post:
      tags:
      - Organize
      - Folders
      summary: Create a new folder
      parameters:
        - name: parentFolder
          in: header
          required: true
          type: number
          description: Parent folder for the new folder
        - name: folderName
          in: header
          required: true
          type: string
          description: Name of the new folder
        - name: folderDescription
          in: header
          required: false
          type: string
          description: Description of the new folder
      responses:
        200:
          description: Folder with the same name already exists under the same parent
          schema:
            $ref: '#/definitions/Info'
        201:
          description: Folder is created with new folder id in message
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad parameters
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to parent folders
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Folder not found
          schema:
            $ref: '#/definitions/Info'
  /folders/{id}:
    get:
      tags:
      - Organize
      - Folders
      parameters:
        - name: id
          in: path
          required: true
          type: number
          description: ID of the folder
      summary: Get a single folder details
      responses:
        200:
          description: Details of the required folder
          schema:
            $ref: '#/definitions/Folder'
        400:
          description: Bad parameters
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to folder
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Folder not found
          schema:
            $ref: '#/definitions/Info'
    delete:
      tags:
      - Organize
      - Folders
      parameters:
        - name: id
          in: path
          required: true
          type: number
          description: ID of the folder to be deleted
      summary: Delete a folder
      responses:
        202:
          description: Folder scheduled to be deleted
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad parameters
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to folder
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Folder not found
          schema:
            $ref: '#/definitions/Info'
    patch:
      tags:
      - Organize
      - Folders
      parameters:
        - name: id
          in: path
          required: true
          type: number
          description: ID of the folder to be edited
        - name: name
          in: header
          required: false
          type: string
          description: New name of the folder
        - name: description
          in: header
          required: false
          type: string
          description: New description of the folder
      summary: Edit a folder's description
      responses:
        200:
          description: Folder is updated
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad parameters
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to folder
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Folder not found
          schema:
            $ref: '#/definitions/Info'
    put:
      tags:
      - Organize
      - Folders
      parameters:
        - name: id
          in: path
          required: true
          type: number
          description: ID of the folder to be edited
        - name: parent
          in: header
          required: true
          type: number
          description: New parent folder id
        - name: action
          in: header
          required: true
          type: string
          enum:
            - copy
            - move
          description: Action to be performed
      summary: Copy/Move a folder
      responses:
        202:
          description: Folder will be copied/moved
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad parameters
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to folder
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Folder not found
          schema:
            $ref: '#/definitions/Info'

  /report:
    get:
      tags:
      - Job
      - Upload
      summary: Get the reports for a given upload
      parameters:
        - name: uploadId
          in: header
          required: true
          type: number
          description: Id of the upload to generate the report for
        - name: reportFormat
          in: header
          required: true
          type: string
          enum:
            - dep5
            - spdx2
            - spdx2tv
            - readmeoss
            - unifiedreport
      responses:
        201:
          description: Report generation is scheduled. Link to download report will be in message
          schema:
            $ref: '#/definitions/Info'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Upload not found
          schema:
            $ref: '#/definitions/Info'
  /report/{id}:
    get:
      tags:
      - Job
      - Upload
      summary: Download the report
      parameters:
        - name: id
          in: path
          required: true
          type: number
          description: Id the report to download
      produces:
        - text/plain
        - application/zip
      responses:
        200:
          description: Required report
          schema:
            type: file
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Info'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Info'
        404:
          description: Upload not found
          schema:
            $ref: '#/definitions/Info'
        503:
          description: Report is not ready yet. Check 'Retry-After' header.
          schema:
            $ref: '#/definitions/Info'

definitions:
  SearchResults:
    type: object
    properties:
      upload:
        $ref: '#/definitions/Upload'
      uploadTreeId:
        type: number
        format: int
      filename:
        type: string
        description: Filename of the treeItem
  LicenseDecider:
    type: object
    properties:
      nomos_monk:
        type: boolean
        description: Scanners matches if all Nomos findings are within the Monk findings.
      bulk_reused:
        type: boolean
        description: Bulk phrases from reused packages.
      new_scanner:
        type: boolean
        description: New scanner results, i.e., decisions were marked as work in progress if new scanner finds additional licenses.
  ScanOptions:
    type: object
    properties:
      analysis:
        $ref: '#/definitions/Analysis'
      decider:
        $ref: '#/definitions/LicenseDecider'
      reuse:
        $ref: '#/definitions/Reuser'
  Upload:
    type: object
    properties:
      folderid:
        type: number
        format: int
        description: The folder id, where the upload is located
      foldername:
        type: string
        description: The name of the folder where the upload is located
      id:
        type: number
        format: int
        description: Upload id of the upload.
      description:
        type: string
        description: Description of the upload.
      uploadname:
        type: string
        description: Display name of the upload.
      uploaddate:
        type: string
        description: Date, when the file was uploaded.
      filesize:
        type: number
        description: Filesize in Bytes.
  Job:
    type: object
    properties:
      job_id:
        type: number
        format: int
      status:
        type: string
      filename:
        type: string
      eta:
        type: string
  Info:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      type:
        type: string
  User:
    type: object
    properties:
      id:
        type: string
        description: id of the user
      name:
        type: string
        description: username
      description:
        type: string
        description: description of the user
      email:
        type: string
        description: email of the user, needs to be unique and is required
      accessLevel:
        type: string
        enum:
          - none
          - read_only
          - read_write
          - admin
      root_folder_id:
        type: number
        format: int
        description: root folder id of the user
      password:
        type: string
        description: password of the user. This will be null, if not needed
      emailNotification:
        type: boolean
        description: enable email notification when upload scan completes
      agents:
        $ref: '#/definitions/Analysis'
  Analysis:
    type: object
    properties:
      bucket:
        type: boolean
        description: Should bucket analysis be run on this upload
      copyright_email_author:
        type: boolean
        description: Should Copyright/Email/URL/Author Analysis be run on this upload.
      ecc:
        type: boolean
        description: Should ECC Analysis be run on this upload.
      keyword:
        type: boolean
        description: Should keyword Analysis be run on this upload.
      mime:
        type: boolean
        description: Should MIME Analysis be run on this upload.
      monk:
        type: boolean
        description: Should Monk Analysis be run on this upload.
      nomos:
        type: boolean
        description: Should Nomos Analysis be run on this upload.
      package:
        type: boolean
        description: Should Package Analysis be run on this upload.
  Reuser:
    type: object
    properties:
      reuse_upload:
        type: number
        format: integer
        description: The UploadID to reuse.
      reuse_group:
        type: number
        format: integer
        description: The group of the reused upload
      reuse_main:
        type: boolean
        description: Scanners matches if all Nomos findings are within the Monk findings.
      reuse_enhanced:
        type: boolean
        description: Bulk phrases from reused packages.
    required:
      - reuse_uplod
      - reuse_group
  Folder:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: Id of the folder.
      name:
        type: string
        description: Name of the folder.
      description:
        type: string
        description: Description of the folder.
