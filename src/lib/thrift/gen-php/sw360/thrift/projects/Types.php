<?php
namespace sw360\thrift\projects;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ProjectState {
  const ACTIVE = 0;
  const PHASED_OUT = 1;
  const UNKNOWN = 2;
  static public $__names = array(
    0 => 'ACTIVE',
    1 => 'PHASED_OUT',
    2 => 'UNKNOWN',
  );
}

final class ProjectType {
  const CUSTOMER = 0;
  const INTERNAL = 1;
  const PRODUCT = 2;
  const SERVICE = 3;
  static public $__names = array(
    0 => 'CUSTOMER',
    1 => 'INTERNAL',
    2 => 'PRODUCT',
    3 => 'SERVICE',
  );
}

final class ProjectRelationship {
  const UNKNOWN = 0;
  const REFERRED = 1;
  const CONTAINED = 2;
  const DUPLICATE = 3;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'REFERRED',
    2 => 'CONTAINED',
    3 => 'DUPLICATE',
  );
}

class Project {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "project";
  public $name = null;
  public $description = null;
  public $version = null;
  public $attachments = null;
  public $createdOn = null;
  public $businessUnit = null;
  public $state = null;
  public $projectType = null;
  public $createdBy = null;
  public $projectResponsible = null;
  public $leadArchitect = null;
  public $moderators = null;
  public $comoderators = null;
  public $contributors = null;
  public $visbility = null;
  public $linkedProjects = null;
  public $releaseIdToUsage = null;
  public $clearingTeam = null;
  public $preevaluationDeadline = null;
  public $systemTestStart = null;
  public $systemTestEnd = null;
  public $deliveryStart = null;
  public $phaseOutSince = null;
  public $homepage = null;
  public $wiki = null;
  public $documentState = null;
  public $releaseIds = null;
  public $releaseClearingStateSummary = null;
  public $permissions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'attachments',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\sw360\thrift\attachments\Attachment',
            ),
          ),
        11 => array(
          'var' => 'createdOn',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'businessUnit',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'projectType',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'createdBy',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'projectResponsible',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'leadArchitect',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'moderators',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        26 => array(
          'var' => 'comoderators',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        27 => array(
          'var' => 'contributors',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        28 => array(
          'var' => 'visbility',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'linkedProjects',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        31 => array(
          'var' => 'releaseIdToUsage',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        40 => array(
          'var' => 'clearingTeam',
          'type' => TType::STRING,
          ),
        41 => array(
          'var' => 'preevaluationDeadline',
          'type' => TType::STRING,
          ),
        42 => array(
          'var' => 'systemTestStart',
          'type' => TType::STRING,
          ),
        43 => array(
          'var' => 'systemTestEnd',
          'type' => TType::STRING,
          ),
        44 => array(
          'var' => 'deliveryStart',
          'type' => TType::STRING,
          ),
        45 => array(
          'var' => 'phaseOutSince',
          'type' => TType::STRING,
          ),
        50 => array(
          'var' => 'homepage',
          'type' => TType::STRING,
          ),
        52 => array(
          'var' => 'wiki',
          'type' => TType::STRING,
          ),
        70 => array(
          'var' => 'documentState',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\DocumentState',
          ),
        100 => array(
          'var' => 'releaseIds',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        101 => array(
          'var' => 'releaseClearingStateSummary',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\components\ReleaseClearingStateSummary',
          ),
        200 => array(
          'var' => 'permissions',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['attachments'])) {
        $this->attachments = $vals['attachments'];
      }
      if (isset($vals['createdOn'])) {
        $this->createdOn = $vals['createdOn'];
      }
      if (isset($vals['businessUnit'])) {
        $this->businessUnit = $vals['businessUnit'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['projectType'])) {
        $this->projectType = $vals['projectType'];
      }
      if (isset($vals['createdBy'])) {
        $this->createdBy = $vals['createdBy'];
      }
      if (isset($vals['projectResponsible'])) {
        $this->projectResponsible = $vals['projectResponsible'];
      }
      if (isset($vals['leadArchitect'])) {
        $this->leadArchitect = $vals['leadArchitect'];
      }
      if (isset($vals['moderators'])) {
        $this->moderators = $vals['moderators'];
      }
      if (isset($vals['comoderators'])) {
        $this->comoderators = $vals['comoderators'];
      }
      if (isset($vals['contributors'])) {
        $this->contributors = $vals['contributors'];
      }
      if (isset($vals['visbility'])) {
        $this->visbility = $vals['visbility'];
      }
      if (isset($vals['linkedProjects'])) {
        $this->linkedProjects = $vals['linkedProjects'];
      }
      if (isset($vals['releaseIdToUsage'])) {
        $this->releaseIdToUsage = $vals['releaseIdToUsage'];
      }
      if (isset($vals['clearingTeam'])) {
        $this->clearingTeam = $vals['clearingTeam'];
      }
      if (isset($vals['preevaluationDeadline'])) {
        $this->preevaluationDeadline = $vals['preevaluationDeadline'];
      }
      if (isset($vals['systemTestStart'])) {
        $this->systemTestStart = $vals['systemTestStart'];
      }
      if (isset($vals['systemTestEnd'])) {
        $this->systemTestEnd = $vals['systemTestEnd'];
      }
      if (isset($vals['deliveryStart'])) {
        $this->deliveryStart = $vals['deliveryStart'];
      }
      if (isset($vals['phaseOutSince'])) {
        $this->phaseOutSince = $vals['phaseOutSince'];
      }
      if (isset($vals['homepage'])) {
        $this->homepage = $vals['homepage'];
      }
      if (isset($vals['wiki'])) {
        $this->wiki = $vals['wiki'];
      }
      if (isset($vals['documentState'])) {
        $this->documentState = $vals['documentState'];
      }
      if (isset($vals['releaseIds'])) {
        $this->releaseIds = $vals['releaseIds'];
      }
      if (isset($vals['releaseClearingStateSummary'])) {
        $this->releaseClearingStateSummary = $vals['releaseClearingStateSummary'];
      }
      if (isset($vals['permissions'])) {
        $this->permissions = $vals['permissions'];
      }
    }
  }

  public function getName() {
    return 'Project';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::SET) {
            $this->attachments = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \sw360\thrift\attachments\Attachment();
              $xfer += $elem5->read($input);
              if (is_scalar($elem5)) {
                $this->attachments[$elem5] = true;
              } else {
                $this->attachments []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdOn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->businessUnit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->projectType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->projectResponsible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->leadArchitect);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::SET) {
            $this->moderators = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readSetBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              if (is_scalar($elem11)) {
                $this->moderators[$elem11] = true;
              } else {
                $this->moderators []= $elem11;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::SET) {
            $this->comoderators = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readSetBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readString($elem17);
              if (is_scalar($elem17)) {
                $this->comoderators[$elem17] = true;
              } else {
                $this->comoderators []= $elem17;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::SET) {
            $this->contributors = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readSetBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readString($elem23);
              if (is_scalar($elem23)) {
                $this->contributors[$elem23] = true;
              } else {
                $this->contributors []= $elem23;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->visbility);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::MAP) {
            $this->linkedProjects = array();
            $_size24 = 0;
            $_ktype25 = 0;
            $_vtype26 = 0;
            $xfer += $input->readMapBegin($_ktype25, $_vtype26, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $key29 = '';
              $val30 = 0;
              $xfer += $input->readString($key29);
              $xfer += $input->readI32($val30);
              $this->linkedProjects[$key29] = $val30;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::MAP) {
            $this->releaseIdToUsage = array();
            $_size31 = 0;
            $_ktype32 = 0;
            $_vtype33 = 0;
            $xfer += $input->readMapBegin($_ktype32, $_vtype33, $_size31);
            for ($_i35 = 0; $_i35 < $_size31; ++$_i35)
            {
              $key36 = '';
              $val37 = '';
              $xfer += $input->readString($key36);
              $xfer += $input->readString($val37);
              $this->releaseIdToUsage[$key36] = $val37;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clearingTeam);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preevaluationDeadline);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemTestStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemTestEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deliveryStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 45:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phaseOutSince);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->homepage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wiki);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == TType::STRUCT) {
            $this->documentState = new \sw360\thrift\DocumentState();
            $xfer += $this->documentState->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 100:
          if ($ftype == TType::SET) {
            $this->releaseIds = array();
            $_size38 = 0;
            $_etype41 = 0;
            $xfer += $input->readSetBegin($_etype41, $_size38);
            for ($_i42 = 0; $_i42 < $_size38; ++$_i42)
            {
              $elem43 = null;
              $xfer += $input->readString($elem43);
              if (is_scalar($elem43)) {
                $this->releaseIds[$elem43] = true;
              } else {
                $this->releaseIds []= $elem43;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 101:
          if ($ftype == TType::STRUCT) {
            $this->releaseClearingStateSummary = new \sw360\thrift\components\ReleaseClearingStateSummary();
            $xfer += $this->releaseClearingStateSummary->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 200:
          if ($ftype == TType::MAP) {
            $this->permissions = array();
            $_size44 = 0;
            $_ktype45 = 0;
            $_vtype46 = 0;
            $xfer += $input->readMapBegin($_ktype45, $_vtype46, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $key49 = 0;
              $val50 = false;
              $xfer += $input->readI32($key49);
              $xfer += $input->readBool($val50);
              $this->permissions[$key49] = $val50;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Project');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 5);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 6);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachments !== null) {
      if (!is_array($this->attachments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attachments', TType::SET, 10);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->attachments));
        {
          foreach ($this->attachments as $iter51 => $iter52)
          {
            if (is_scalar($iter52)) {
            $xfer += $iter51->write($output);
            } else {
            $xfer += $iter52->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdOn !== null) {
      $xfer += $output->writeFieldBegin('createdOn', TType::STRING, 11);
      $xfer += $output->writeString($this->createdOn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessUnit !== null) {
      $xfer += $output->writeFieldBegin('businessUnit', TType::STRING, 12);
      $xfer += $output->writeString($this->businessUnit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 13);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->projectType !== null) {
      $xfer += $output->writeFieldBegin('projectType', TType::I32, 15);
      $xfer += $output->writeI32($this->projectType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdBy !== null) {
      $xfer += $output->writeFieldBegin('createdBy', TType::STRING, 21);
      $xfer += $output->writeString($this->createdBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->projectResponsible !== null) {
      $xfer += $output->writeFieldBegin('projectResponsible', TType::STRING, 22);
      $xfer += $output->writeString($this->projectResponsible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leadArchitect !== null) {
      $xfer += $output->writeFieldBegin('leadArchitect', TType::STRING, 23);
      $xfer += $output->writeString($this->leadArchitect);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->moderators !== null) {
      if (!is_array($this->moderators)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('moderators', TType::SET, 25);
      {
        $output->writeSetBegin(TType::STRING, count($this->moderators));
        {
          foreach ($this->moderators as $iter53 => $iter54)
          {
            if (is_scalar($iter54)) {
            $xfer += $output->writeString($iter53);
            } else {
            $xfer += $output->writeString($iter54);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comoderators !== null) {
      if (!is_array($this->comoderators)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('comoderators', TType::SET, 26);
      {
        $output->writeSetBegin(TType::STRING, count($this->comoderators));
        {
          foreach ($this->comoderators as $iter55 => $iter56)
          {
            if (is_scalar($iter56)) {
            $xfer += $output->writeString($iter55);
            } else {
            $xfer += $output->writeString($iter56);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contributors !== null) {
      if (!is_array($this->contributors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contributors', TType::SET, 27);
      {
        $output->writeSetBegin(TType::STRING, count($this->contributors));
        {
          foreach ($this->contributors as $iter57 => $iter58)
          {
            if (is_scalar($iter58)) {
            $xfer += $output->writeString($iter57);
            } else {
            $xfer += $output->writeString($iter58);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->visbility !== null) {
      $xfer += $output->writeFieldBegin('visbility', TType::I32, 28);
      $xfer += $output->writeI32($this->visbility);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->linkedProjects !== null) {
      if (!is_array($this->linkedProjects)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('linkedProjects', TType::MAP, 30);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->linkedProjects));
        {
          foreach ($this->linkedProjects as $kiter59 => $viter60)
          {
            $xfer += $output->writeString($kiter59);
            $xfer += $output->writeI32($viter60);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releaseIdToUsage !== null) {
      if (!is_array($this->releaseIdToUsage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('releaseIdToUsage', TType::MAP, 31);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->releaseIdToUsage));
        {
          foreach ($this->releaseIdToUsage as $kiter61 => $viter62)
          {
            $xfer += $output->writeString($kiter61);
            $xfer += $output->writeString($viter62);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clearingTeam !== null) {
      $xfer += $output->writeFieldBegin('clearingTeam', TType::STRING, 40);
      $xfer += $output->writeString($this->clearingTeam);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preevaluationDeadline !== null) {
      $xfer += $output->writeFieldBegin('preevaluationDeadline', TType::STRING, 41);
      $xfer += $output->writeString($this->preevaluationDeadline);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemTestStart !== null) {
      $xfer += $output->writeFieldBegin('systemTestStart', TType::STRING, 42);
      $xfer += $output->writeString($this->systemTestStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemTestEnd !== null) {
      $xfer += $output->writeFieldBegin('systemTestEnd', TType::STRING, 43);
      $xfer += $output->writeString($this->systemTestEnd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryStart !== null) {
      $xfer += $output->writeFieldBegin('deliveryStart', TType::STRING, 44);
      $xfer += $output->writeString($this->deliveryStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phaseOutSince !== null) {
      $xfer += $output->writeFieldBegin('phaseOutSince', TType::STRING, 45);
      $xfer += $output->writeString($this->phaseOutSince);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->homepage !== null) {
      $xfer += $output->writeFieldBegin('homepage', TType::STRING, 50);
      $xfer += $output->writeString($this->homepage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wiki !== null) {
      $xfer += $output->writeFieldBegin('wiki', TType::STRING, 52);
      $xfer += $output->writeString($this->wiki);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->documentState !== null) {
      if (!is_object($this->documentState)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('documentState', TType::STRUCT, 70);
      $xfer += $this->documentState->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releaseIds !== null) {
      if (!is_array($this->releaseIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('releaseIds', TType::SET, 100);
      {
        $output->writeSetBegin(TType::STRING, count($this->releaseIds));
        {
          foreach ($this->releaseIds as $iter63 => $iter64)
          {
            if (is_scalar($iter64)) {
            $xfer += $output->writeString($iter63);
            } else {
            $xfer += $output->writeString($iter64);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releaseClearingStateSummary !== null) {
      if (!is_object($this->releaseClearingStateSummary)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('releaseClearingStateSummary', TType::STRUCT, 101);
      $xfer += $this->releaseClearingStateSummary->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissions !== null) {
      if (!is_array($this->permissions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('permissions', TType::MAP, 200);
      {
        $output->writeMapBegin(TType::I32, TType::BOOL, count($this->permissions));
        {
          foreach ($this->permissions as $kiter65 => $viter66)
          {
            $xfer += $output->writeI32($kiter65);
            $xfer += $output->writeBool($viter66);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProjectLink {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $relation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'relation',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
    }
  }

  public function getName() {
    return 'ProjectLink';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProjectLink');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 3);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


