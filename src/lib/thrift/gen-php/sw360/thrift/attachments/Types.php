<?php
namespace sw360\thrift\attachments;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class AttachmentType {
  const DOCUMENT = 0;
  const SOURCE = 1;
  const DESIGN = 2;
  const REQUIREMENT = 3;
  const CLEARING_REPORT = 4;
  const CLI_XML = 5;
  const CLI_COMBINED = 6;
  const SCAN_RESULT_REPORT = 7;
  const SCAN_RESULT_REPORT_LCR = 8;
  const SOURCE_SELF = 9;
  const BINARY = 10;
  const BINARY_SELF = 11;
  const DECISION_REPORT = 12;
  const LEGAL_EVALUATION = 13;
  const LICENSE_AGREEMENT = 14;
  const SCREENSHOT = 15;
  const OTHER = 16;
  static public $__names = array(
    0 => 'DOCUMENT',
    1 => 'SOURCE',
    2 => 'DESIGN',
    3 => 'REQUIREMENT',
    4 => 'CLEARING_REPORT',
    5 => 'CLI_XML',
    6 => 'CLI_COMBINED',
    7 => 'SCAN_RESULT_REPORT',
    8 => 'SCAN_RESULT_REPORT_LCR',
    9 => 'SOURCE_SELF',
    10 => 'BINARY',
    11 => 'BINARY_SELF',
    12 => 'DECISION_REPORT',
    13 => 'LEGAL_EVALUATION',
    14 => 'LICENSE_AGREEMENT',
    15 => 'SCREENSHOT',
    16 => 'OTHER',
  );
}

class Attachment {
  static $_TSPEC;

  public $attachmentContentId = null;
  public $filename = null;
  public $attachmentType = null;
  public $comment = null;
  public $createdOn = null;
  public $createdBy = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'attachmentContentId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'filename',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'attachmentType',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'createdOn',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'createdBy',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['attachmentContentId'])) {
        $this->attachmentContentId = $vals['attachmentContentId'];
      }
      if (isset($vals['filename'])) {
        $this->filename = $vals['filename'];
      }
      if (isset($vals['attachmentType'])) {
        $this->attachmentType = $vals['attachmentType'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['createdOn'])) {
        $this->createdOn = $vals['createdOn'];
      }
      if (isset($vals['createdBy'])) {
        $this->createdBy = $vals['createdBy'];
      }
    }
  }

  public function getName() {
    return 'Attachment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->attachmentContentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->attachmentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdOn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Attachment');
    if ($this->attachmentContentId !== null) {
      $xfer += $output->writeFieldBegin('attachmentContentId', TType::STRING, 1);
      $xfer += $output->writeString($this->attachmentContentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filename !== null) {
      $xfer += $output->writeFieldBegin('filename', TType::STRING, 5);
      $xfer += $output->writeString($this->filename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachmentType !== null) {
      $xfer += $output->writeFieldBegin('attachmentType', TType::I32, 10);
      $xfer += $output->writeI32($this->attachmentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 11);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdOn !== null) {
      $xfer += $output->writeFieldBegin('createdOn', TType::STRING, 12);
      $xfer += $output->writeString($this->createdOn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdBy !== null) {
      $xfer += $output->writeFieldBegin('createdBy', TType::STRING, 13);
      $xfer += $output->writeString($this->createdBy);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AttachmentContent {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "attachment";
  public $onlyRemote = null;
  public $remoteUrl = null;
  public $filename = null;
  public $contentType = null;
  public $partsCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'onlyRemote',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'remoteUrl',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'filename',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'contentType',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'partsCount',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['onlyRemote'])) {
        $this->onlyRemote = $vals['onlyRemote'];
      }
      if (isset($vals['remoteUrl'])) {
        $this->remoteUrl = $vals['remoteUrl'];
      }
      if (isset($vals['filename'])) {
        $this->filename = $vals['filename'];
      }
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['partsCount'])) {
        $this->partsCount = $vals['partsCount'];
      }
    }
  }

  public function getName() {
    return 'AttachmentContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onlyRemote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remoteUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->partsCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AttachmentContent');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onlyRemote !== null) {
      $xfer += $output->writeFieldBegin('onlyRemote', TType::BOOL, 10);
      $xfer += $output->writeBool($this->onlyRemote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remoteUrl !== null) {
      $xfer += $output->writeFieldBegin('remoteUrl', TType::STRING, 11);
      $xfer += $output->writeString($this->remoteUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filename !== null) {
      $xfer += $output->writeFieldBegin('filename', TType::STRING, 20);
      $xfer += $output->writeString($this->filename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::STRING, 21);
      $xfer += $output->writeString($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partsCount !== null) {
      $xfer += $output->writeFieldBegin('partsCount', TType::STRING, 22);
      $xfer += $output->writeString($this->partsCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FilledAttachment {
  static $_TSPEC;

  public $attachment = null;
  public $attachmentContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'attachment',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\attachments\Attachment',
          ),
        2 => array(
          'var' => 'attachmentContent',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\attachments\AttachmentContent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['attachment'])) {
        $this->attachment = $vals['attachment'];
      }
      if (isset($vals['attachmentContent'])) {
        $this->attachmentContent = $vals['attachmentContent'];
      }
    }
  }

  public function getName() {
    return 'FilledAttachment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->attachment = new \sw360\thrift\attachments\Attachment();
            $xfer += $this->attachment->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->attachmentContent = new \sw360\thrift\attachments\AttachmentContent();
            $xfer += $this->attachmentContent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FilledAttachment');
    if ($this->attachment !== null) {
      if (!is_object($this->attachment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attachment', TType::STRUCT, 1);
      $xfer += $this->attachment->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachmentContent !== null) {
      if (!is_object($this->attachmentContent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attachmentContent', TType::STRUCT, 2);
      $xfer += $this->attachmentContent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DatabaseAddress {
  static $_TSPEC;

  public $url = null;
  public $dbName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'dbName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['dbName'])) {
        $this->dbName = $vals['dbName'];
      }
    }
  }

  public function getName() {
    return 'DatabaseAddress';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dbName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DatabaseAddress');
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 1);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dbName !== null) {
      $xfer += $output->writeFieldBegin('dbName', TType::STRING, 2);
      $xfer += $output->writeString($this->dbName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


