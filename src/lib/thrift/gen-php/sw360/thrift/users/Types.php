<?php
namespace sw360\thrift\users;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class UserGroup {
  const USER = 0;
  const ADMIN = 1;
  const CLEARING_ADMIN = 2;
  static public $__names = array(
    0 => 'USER',
    1 => 'ADMIN',
    2 => 'CLEARING_ADMIN',
  );
}

final class LocalGroup {
  const BU = 0;
  const CONTRIBUTOR = 1;
  const MODERATOR = 2;
  const OWNER = 3;
  static public $__names = array(
    0 => 'BU',
    1 => 'CONTRIBUTOR',
    2 => 'MODERATOR',
    3 => 'OWNER',
  );
}

final class RequestedAction {
  const READ = 1;
  const WRITE = 2;
  const DELETE = 3;
  const USERS = 4;
  const CLEARING = 5;
  const ATTACHMENTS = 6;
  static public $__names = array(
    1 => 'READ',
    2 => 'WRITE',
    3 => 'DELETE',
    4 => 'USERS',
    5 => 'CLEARING',
    6 => 'ATTACHMENTS',
  );
}

class User {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "user";
  public $email = null;
  public $userGroup = null;
  public $gid = null;
  public $fullname = null;
  public $givenname = null;
  public $lastname = null;
  public $department = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'userGroup',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'gid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'fullname',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'givenname',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'lastname',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'department',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['userGroup'])) {
        $this->userGroup = $vals['userGroup'];
      }
      if (isset($vals['gid'])) {
        $this->gid = $vals['gid'];
      }
      if (isset($vals['fullname'])) {
        $this->fullname = $vals['fullname'];
      }
      if (isset($vals['givenname'])) {
        $this->givenname = $vals['givenname'];
      }
      if (isset($vals['lastname'])) {
        $this->lastname = $vals['lastname'];
      }
      if (isset($vals['department'])) {
        $this->department = $vals['department'];
      }
    }
  }

  public function getName() {
    return 'User';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userGroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fullname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->givenname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->department);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('User');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 4);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userGroup !== null) {
      $xfer += $output->writeFieldBegin('userGroup', TType::I32, 5);
      $xfer += $output->writeI32($this->userGroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gid !== null) {
      $xfer += $output->writeFieldBegin('gid', TType::STRING, 6);
      $xfer += $output->writeString($this->gid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fullname !== null) {
      $xfer += $output->writeFieldBegin('fullname', TType::STRING, 7);
      $xfer += $output->writeString($this->fullname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->givenname !== null) {
      $xfer += $output->writeFieldBegin('givenname', TType::STRING, 8);
      $xfer += $output->writeString($this->givenname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastname !== null) {
      $xfer += $output->writeFieldBegin('lastname', TType::STRING, 9);
      $xfer += $output->writeString($this->lastname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->department !== null) {
      $xfer += $output->writeFieldBegin('department', TType::STRING, 10);
      $xfer += $output->writeString($this->department);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


