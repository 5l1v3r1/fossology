<?php
namespace sw360\thrift\components;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class RepositoryType {
  const UNKNOWN = 0;
  const GIT = 14;
  const CLEARCASE = 7;
  const SVN = 1;
  const CVS = 2;
  const MERCURIAL = 16;
  const PERFORCE = 4;
  const VISUAL_SOURCESAFE = 6;
  const BAZAAR = 11;
  const ALIENBRAIN = 3;
  const TEAM_FOUNDATION_SERVER = 5;
  const RATIONAL_SYNERGY = 8;
  const PTC_INTEGRITY = 9;
  const DTR = 10;
  const DARCS = 12;
  const FOSSIL = 13;
  const GNU_ARCH = 15;
  const MONOTONE = 17;
  const BIT_KEEPER = 18;
  const RATIONAL_TEAM_CONCERT = 19;
  const RCS = 20;
  static public $__names = array(
    0 => 'UNKNOWN',
    14 => 'GIT',
    7 => 'CLEARCASE',
    1 => 'SVN',
    2 => 'CVS',
    16 => 'MERCURIAL',
    4 => 'PERFORCE',
    6 => 'VISUAL_SOURCESAFE',
    11 => 'BAZAAR',
    3 => 'ALIENBRAIN',
    5 => 'TEAM_FOUNDATION_SERVER',
    8 => 'RATIONAL_SYNERGY',
    9 => 'PTC_INTEGRITY',
    10 => 'DTR',
    12 => 'DARCS',
    13 => 'FOSSIL',
    15 => 'GNU_ARCH',
    17 => 'MONOTONE',
    18 => 'BIT_KEEPER',
    19 => 'RATIONAL_TEAM_CONCERT',
    20 => 'RCS',
  );
}

final class FossologyStatus {
  const CONNECTION_FAILED = 0;
  const ERROR = 1;
  const NON_EXISTENT = 2;
  const NOT_SENT = 3;
  const INACCESSIBLE = 4;
  const SENT = 10;
  const SCANNING = 11;
  const OPEN = 20;
  const IN_PROGRESS = 21;
  const CLOSED = 22;
  const REJECTED = 23;
  const REPORT_AVAILABLE = 30;
  static public $__names = array(
    0 => 'CONNECTION_FAILED',
    1 => 'ERROR',
    2 => 'NON_EXISTENT',
    3 => 'NOT_SENT',
    4 => 'INACCESSIBLE',
    10 => 'SENT',
    11 => 'SCANNING',
    20 => 'OPEN',
    21 => 'IN_PROGRESS',
    22 => 'CLOSED',
    23 => 'REJECTED',
    30 => 'REPORT_AVAILABLE',
  );
}

final class ClearingState {
  const NEW_CLEARING = 0;
  const SENT_TO_FOSSOLOGY = 1;
  const UNDER_CLEARING = 2;
  const REPORT_AVAILABLE = 3;
  static public $__names = array(
    0 => 'NEW_CLEARING',
    1 => 'SENT_TO_FOSSOLOGY',
    2 => 'UNDER_CLEARING',
    3 => 'REPORT_AVAILABLE',
  );
}

final class MainlineState {
  const OPEN = 0;
  const MAINLINE = 1;
  const SPECIFIC = 2;
  const PHASEOUT = 3;
  static public $__names = array(
    0 => 'OPEN',
    1 => 'MAINLINE',
    2 => 'SPECIFIC',
    3 => 'PHASEOUT',
  );
}

final class ReleaseRelationship {
  const CONTAINED = 0;
  const REFERRED = 1;
  const UNKNOWN = 2;
  static public $__names = array(
    0 => 'CONTAINED',
    1 => 'REFERRED',
    2 => 'UNKNOWN',
  );
}

final class ComponentType {
  const SIEMENS = 0;
  const OSS = 1;
  const COTS = 2;
  const FREESOFTWARE = 3;
  static public $__names = array(
    0 => 'SIEMENS',
    1 => 'OSS',
    2 => 'COTS',
    3 => 'FREESOFTWARE',
  );
}

class Repository {
  static $_TSPEC;

  public $url = null;
  public $repositorytype = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'repositorytype',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['repositorytype'])) {
        $this->repositorytype = $vals['repositorytype'];
      }
    }
  }

  public function getName() {
    return 'Repository';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->repositorytype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Repository');
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 1);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repositorytype !== null) {
      $xfer += $output->writeFieldBegin('repositorytype', TType::I32, 2);
      $xfer += $output->writeI32($this->repositorytype);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ClearingInformation {
  static $_TSPEC;

  public $AL = null;
  public $ECCN = null;
  public $click4SupplierID = null;
  public $assessorContactPerson = null;
  public $assessorDepartment = null;
  public $additionalRequestInfo = null;
  public $evaluated = null;
  public $procStart = null;
  public $requestID = null;
  public $binariesOriginalFromCommunity = null;
  public $binariesSelfMade = null;
  public $componentLicenseInformation = null;
  public $sourceCodeDelivery = null;
  public $sourceCodeOriginalFromCommunity = null;
  public $sourceCodeRExMade = null;
  public $sourceCodeSelfMade = null;
  public $screenshotOfWebSite = null;
  public $finalizedLCR = null;
  public $LCRScanResult = null;
  public $legalEvaluation = null;
  public $licenseAgreement = null;
  public $scanned = null;
  public $componentClearingReport = null;
  public $clStandard = null;
  public $comment = null;
  public $countOfSecurityVn = null;
  public $sharepoint = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'AL',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ECCN',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'click4SupplierID',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'assessorContactPerson',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'assessorDepartment',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'additionalRequestInfo',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'evaluated',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'procStart',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'requestID',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'binariesOriginalFromCommunity',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'binariesSelfMade',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'componentLicenseInformation',
          'type' => TType::BOOL,
          ),
        34 => array(
          'var' => 'sourceCodeDelivery',
          'type' => TType::BOOL,
          ),
        35 => array(
          'var' => 'sourceCodeOriginalFromCommunity',
          'type' => TType::BOOL,
          ),
        36 => array(
          'var' => 'sourceCodeRExMade',
          'type' => TType::BOOL,
          ),
        37 => array(
          'var' => 'sourceCodeSelfMade',
          'type' => TType::BOOL,
          ),
        38 => array(
          'var' => 'screenshotOfWebSite',
          'type' => TType::BOOL,
          ),
        40 => array(
          'var' => 'finalizedLCR',
          'type' => TType::BOOL,
          ),
        41 => array(
          'var' => 'LCRScanResult',
          'type' => TType::BOOL,
          ),
        42 => array(
          'var' => 'legalEvaluation',
          'type' => TType::BOOL,
          ),
        43 => array(
          'var' => 'licenseAgreement',
          'type' => TType::BOOL,
          ),
        44 => array(
          'var' => 'scanned',
          'type' => TType::STRING,
          ),
        45 => array(
          'var' => 'componentClearingReport',
          'type' => TType::BOOL,
          ),
        46 => array(
          'var' => 'clStandard',
          'type' => TType::STRING,
          ),
        50 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        52 => array(
          'var' => 'countOfSecurityVn',
          'type' => TType::I32,
          ),
        53 => array(
          'var' => 'sharepoint',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['AL'])) {
        $this->AL = $vals['AL'];
      }
      if (isset($vals['ECCN'])) {
        $this->ECCN = $vals['ECCN'];
      }
      if (isset($vals['click4SupplierID'])) {
        $this->click4SupplierID = $vals['click4SupplierID'];
      }
      if (isset($vals['assessorContactPerson'])) {
        $this->assessorContactPerson = $vals['assessorContactPerson'];
      }
      if (isset($vals['assessorDepartment'])) {
        $this->assessorDepartment = $vals['assessorDepartment'];
      }
      if (isset($vals['additionalRequestInfo'])) {
        $this->additionalRequestInfo = $vals['additionalRequestInfo'];
      }
      if (isset($vals['evaluated'])) {
        $this->evaluated = $vals['evaluated'];
      }
      if (isset($vals['procStart'])) {
        $this->procStart = $vals['procStart'];
      }
      if (isset($vals['requestID'])) {
        $this->requestID = $vals['requestID'];
      }
      if (isset($vals['binariesOriginalFromCommunity'])) {
        $this->binariesOriginalFromCommunity = $vals['binariesOriginalFromCommunity'];
      }
      if (isset($vals['binariesSelfMade'])) {
        $this->binariesSelfMade = $vals['binariesSelfMade'];
      }
      if (isset($vals['componentLicenseInformation'])) {
        $this->componentLicenseInformation = $vals['componentLicenseInformation'];
      }
      if (isset($vals['sourceCodeDelivery'])) {
        $this->sourceCodeDelivery = $vals['sourceCodeDelivery'];
      }
      if (isset($vals['sourceCodeOriginalFromCommunity'])) {
        $this->sourceCodeOriginalFromCommunity = $vals['sourceCodeOriginalFromCommunity'];
      }
      if (isset($vals['sourceCodeRExMade'])) {
        $this->sourceCodeRExMade = $vals['sourceCodeRExMade'];
      }
      if (isset($vals['sourceCodeSelfMade'])) {
        $this->sourceCodeSelfMade = $vals['sourceCodeSelfMade'];
      }
      if (isset($vals['screenshotOfWebSite'])) {
        $this->screenshotOfWebSite = $vals['screenshotOfWebSite'];
      }
      if (isset($vals['finalizedLCR'])) {
        $this->finalizedLCR = $vals['finalizedLCR'];
      }
      if (isset($vals['LCRScanResult'])) {
        $this->LCRScanResult = $vals['LCRScanResult'];
      }
      if (isset($vals['legalEvaluation'])) {
        $this->legalEvaluation = $vals['legalEvaluation'];
      }
      if (isset($vals['licenseAgreement'])) {
        $this->licenseAgreement = $vals['licenseAgreement'];
      }
      if (isset($vals['scanned'])) {
        $this->scanned = $vals['scanned'];
      }
      if (isset($vals['componentClearingReport'])) {
        $this->componentClearingReport = $vals['componentClearingReport'];
      }
      if (isset($vals['clStandard'])) {
        $this->clStandard = $vals['clStandard'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['countOfSecurityVn'])) {
        $this->countOfSecurityVn = $vals['countOfSecurityVn'];
      }
      if (isset($vals['sharepoint'])) {
        $this->sharepoint = $vals['sharepoint'];
      }
    }
  }

  public function getName() {
    return 'ClearingInformation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ECCN);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click4SupplierID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->assessorContactPerson);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->assessorDepartment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->additionalRequestInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->evaluated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->procStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->binariesOriginalFromCommunity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->binariesSelfMade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->componentLicenseInformation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sourceCodeDelivery);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sourceCodeOriginalFromCommunity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sourceCodeRExMade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sourceCodeSelfMade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->screenshotOfWebSite);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->finalizedLCR);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->LCRScanResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->legalEvaluation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->licenseAgreement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scanned);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 45:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->componentClearingReport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 46:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clStandard);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->countOfSecurityVn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sharepoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ClearingInformation');
    if ($this->AL !== null) {
      $xfer += $output->writeFieldBegin('AL', TType::STRING, 1);
      $xfer += $output->writeString($this->AL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ECCN !== null) {
      $xfer += $output->writeFieldBegin('ECCN', TType::STRING, 2);
      $xfer += $output->writeString($this->ECCN);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click4SupplierID !== null) {
      $xfer += $output->writeFieldBegin('click4SupplierID', TType::STRING, 3);
      $xfer += $output->writeString($this->click4SupplierID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->assessorContactPerson !== null) {
      $xfer += $output->writeFieldBegin('assessorContactPerson', TType::STRING, 10);
      $xfer += $output->writeString($this->assessorContactPerson);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->assessorDepartment !== null) {
      $xfer += $output->writeFieldBegin('assessorDepartment', TType::STRING, 11);
      $xfer += $output->writeString($this->assessorDepartment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->additionalRequestInfo !== null) {
      $xfer += $output->writeFieldBegin('additionalRequestInfo', TType::STRING, 12);
      $xfer += $output->writeString($this->additionalRequestInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->evaluated !== null) {
      $xfer += $output->writeFieldBegin('evaluated', TType::STRING, 13);
      $xfer += $output->writeString($this->evaluated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->procStart !== null) {
      $xfer += $output->writeFieldBegin('procStart', TType::STRING, 14);
      $xfer += $output->writeString($this->procStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestID !== null) {
      $xfer += $output->writeFieldBegin('requestID', TType::STRING, 15);
      $xfer += $output->writeString($this->requestID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->binariesOriginalFromCommunity !== null) {
      $xfer += $output->writeFieldBegin('binariesOriginalFromCommunity', TType::BOOL, 31);
      $xfer += $output->writeBool($this->binariesOriginalFromCommunity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->binariesSelfMade !== null) {
      $xfer += $output->writeFieldBegin('binariesSelfMade', TType::BOOL, 32);
      $xfer += $output->writeBool($this->binariesSelfMade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->componentLicenseInformation !== null) {
      $xfer += $output->writeFieldBegin('componentLicenseInformation', TType::BOOL, 33);
      $xfer += $output->writeBool($this->componentLicenseInformation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceCodeDelivery !== null) {
      $xfer += $output->writeFieldBegin('sourceCodeDelivery', TType::BOOL, 34);
      $xfer += $output->writeBool($this->sourceCodeDelivery);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceCodeOriginalFromCommunity !== null) {
      $xfer += $output->writeFieldBegin('sourceCodeOriginalFromCommunity', TType::BOOL, 35);
      $xfer += $output->writeBool($this->sourceCodeOriginalFromCommunity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceCodeRExMade !== null) {
      $xfer += $output->writeFieldBegin('sourceCodeRExMade', TType::BOOL, 36);
      $xfer += $output->writeBool($this->sourceCodeRExMade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceCodeSelfMade !== null) {
      $xfer += $output->writeFieldBegin('sourceCodeSelfMade', TType::BOOL, 37);
      $xfer += $output->writeBool($this->sourceCodeSelfMade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->screenshotOfWebSite !== null) {
      $xfer += $output->writeFieldBegin('screenshotOfWebSite', TType::BOOL, 38);
      $xfer += $output->writeBool($this->screenshotOfWebSite);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->finalizedLCR !== null) {
      $xfer += $output->writeFieldBegin('finalizedLCR', TType::BOOL, 40);
      $xfer += $output->writeBool($this->finalizedLCR);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LCRScanResult !== null) {
      $xfer += $output->writeFieldBegin('LCRScanResult', TType::BOOL, 41);
      $xfer += $output->writeBool($this->LCRScanResult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->legalEvaluation !== null) {
      $xfer += $output->writeFieldBegin('legalEvaluation', TType::BOOL, 42);
      $xfer += $output->writeBool($this->legalEvaluation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->licenseAgreement !== null) {
      $xfer += $output->writeFieldBegin('licenseAgreement', TType::BOOL, 43);
      $xfer += $output->writeBool($this->licenseAgreement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scanned !== null) {
      $xfer += $output->writeFieldBegin('scanned', TType::STRING, 44);
      $xfer += $output->writeString($this->scanned);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->componentClearingReport !== null) {
      $xfer += $output->writeFieldBegin('componentClearingReport', TType::BOOL, 45);
      $xfer += $output->writeBool($this->componentClearingReport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clStandard !== null) {
      $xfer += $output->writeFieldBegin('clStandard', TType::STRING, 46);
      $xfer += $output->writeString($this->clStandard);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 50);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countOfSecurityVn !== null) {
      $xfer += $output->writeFieldBegin('countOfSecurityVn', TType::I32, 52);
      $xfer += $output->writeI32($this->countOfSecurityVn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sharepoint !== null) {
      $xfer += $output->writeFieldBegin('sharepoint', TType::STRING, 53);
      $xfer += $output->writeString($this->sharepoint);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Release {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "release";
  public $cpeid = null;
  public $name = null;
  public $version = null;
  public $componentId = null;
  public $releaseDate = null;
  public $attachments = null;
  public $createdOn = null;
  public $repository = null;
  public $mainlineState = null;
  public $clearingState = null;
  public $fossologyId = null;
  public $clearingTeamToFossologyStatus = null;
  public $attachmentInFossology = null;
  public $createdBy = null;
  public $contacts = null;
  public $moderators = null;
  public $subscribers = null;
  public $vendor = null;
  public $vendorId = null;
  public $clearingInformation = null;
  public $languages = null;
  public $operatingSystems = null;
  public $mainLicenseIds = null;
  public $mainLicenseNames = null;
  public $downloadurl = null;
  public $releaseIdToRelationship = null;
  public $documentState = null;
  public $permissions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cpeid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'componentId',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'releaseDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'attachments',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\sw360\thrift\attachments\Attachment',
            ),
          ),
        11 => array(
          'var' => 'createdOn',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'repository',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\components\Repository',
          ),
        16 => array(
          'var' => 'mainlineState',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'clearingState',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'fossologyId',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'clearingTeamToFossologyStatus',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        22 => array(
          'var' => 'attachmentInFossology',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'createdBy',
          'type' => TType::STRING,
          ),
        32 => array(
          'var' => 'contacts',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        34 => array(
          'var' => 'moderators',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        36 => array(
          'var' => 'subscribers',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        40 => array(
          'var' => 'vendor',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\vendors\Vendor',
          ),
        41 => array(
          'var' => 'vendorId',
          'type' => TType::STRING,
          ),
        50 => array(
          'var' => 'clearingInformation',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\components\ClearingInformation',
          ),
        51 => array(
          'var' => 'languages',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        53 => array(
          'var' => 'operatingSystems',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        65 => array(
          'var' => 'mainLicenseIds',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        66 => array(
          'var' => 'mainLicenseNames',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        70 => array(
          'var' => 'downloadurl',
          'type' => TType::STRING,
          ),
        80 => array(
          'var' => 'releaseIdToRelationship',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        90 => array(
          'var' => 'documentState',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\DocumentState',
          ),
        200 => array(
          'var' => 'permissions',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['cpeid'])) {
        $this->cpeid = $vals['cpeid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['componentId'])) {
        $this->componentId = $vals['componentId'];
      }
      if (isset($vals['releaseDate'])) {
        $this->releaseDate = $vals['releaseDate'];
      }
      if (isset($vals['attachments'])) {
        $this->attachments = $vals['attachments'];
      }
      if (isset($vals['createdOn'])) {
        $this->createdOn = $vals['createdOn'];
      }
      if (isset($vals['repository'])) {
        $this->repository = $vals['repository'];
      }
      if (isset($vals['mainlineState'])) {
        $this->mainlineState = $vals['mainlineState'];
      }
      if (isset($vals['clearingState'])) {
        $this->clearingState = $vals['clearingState'];
      }
      if (isset($vals['fossologyId'])) {
        $this->fossologyId = $vals['fossologyId'];
      }
      if (isset($vals['clearingTeamToFossologyStatus'])) {
        $this->clearingTeamToFossologyStatus = $vals['clearingTeamToFossologyStatus'];
      }
      if (isset($vals['attachmentInFossology'])) {
        $this->attachmentInFossology = $vals['attachmentInFossology'];
      }
      if (isset($vals['createdBy'])) {
        $this->createdBy = $vals['createdBy'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['moderators'])) {
        $this->moderators = $vals['moderators'];
      }
      if (isset($vals['subscribers'])) {
        $this->subscribers = $vals['subscribers'];
      }
      if (isset($vals['vendor'])) {
        $this->vendor = $vals['vendor'];
      }
      if (isset($vals['vendorId'])) {
        $this->vendorId = $vals['vendorId'];
      }
      if (isset($vals['clearingInformation'])) {
        $this->clearingInformation = $vals['clearingInformation'];
      }
      if (isset($vals['languages'])) {
        $this->languages = $vals['languages'];
      }
      if (isset($vals['operatingSystems'])) {
        $this->operatingSystems = $vals['operatingSystems'];
      }
      if (isset($vals['mainLicenseIds'])) {
        $this->mainLicenseIds = $vals['mainLicenseIds'];
      }
      if (isset($vals['mainLicenseNames'])) {
        $this->mainLicenseNames = $vals['mainLicenseNames'];
      }
      if (isset($vals['downloadurl'])) {
        $this->downloadurl = $vals['downloadurl'];
      }
      if (isset($vals['releaseIdToRelationship'])) {
        $this->releaseIdToRelationship = $vals['releaseIdToRelationship'];
      }
      if (isset($vals['documentState'])) {
        $this->documentState = $vals['documentState'];
      }
      if (isset($vals['permissions'])) {
        $this->permissions = $vals['permissions'];
      }
    }
  }

  public function getName() {
    return 'Release';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cpeid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->componentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->releaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::SET) {
            $this->attachments = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \sw360\thrift\attachments\Attachment();
              $xfer += $elem5->read($input);
              if (is_scalar($elem5)) {
                $this->attachments[$elem5] = true;
              } else {
                $this->attachments []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdOn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->repository = new \sw360\thrift\components\Repository();
            $xfer += $this->repository->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mainlineState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clearingState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fossologyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::MAP) {
            $this->clearingTeamToFossologyStatus = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = '';
              $val12 = 0;
              $xfer += $input->readString($key11);
              $xfer += $input->readI32($val12);
              $this->clearingTeamToFossologyStatus[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->attachmentInFossology);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::SET) {
            $this->contacts = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readSetBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $xfer += $input->readString($elem18);
              if (is_scalar($elem18)) {
                $this->contacts[$elem18] = true;
              } else {
                $this->contacts []= $elem18;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::SET) {
            $this->moderators = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readSetBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $xfer += $input->readString($elem24);
              if (is_scalar($elem24)) {
                $this->moderators[$elem24] = true;
              } else {
                $this->moderators []= $elem24;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::SET) {
            $this->subscribers = array();
            $_size25 = 0;
            $_etype28 = 0;
            $xfer += $input->readSetBegin($_etype28, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $elem30 = null;
              $xfer += $input->readString($elem30);
              if (is_scalar($elem30)) {
                $this->subscribers[$elem30] = true;
              } else {
                $this->subscribers []= $elem30;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::STRUCT) {
            $this->vendor = new \sw360\thrift\vendors\Vendor();
            $xfer += $this->vendor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vendorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRUCT) {
            $this->clearingInformation = new \sw360\thrift\components\ClearingInformation();
            $xfer += $this->clearingInformation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::SET) {
            $this->languages = array();
            $_size31 = 0;
            $_etype34 = 0;
            $xfer += $input->readSetBegin($_etype34, $_size31);
            for ($_i35 = 0; $_i35 < $_size31; ++$_i35)
            {
              $elem36 = null;
              $xfer += $input->readString($elem36);
              if (is_scalar($elem36)) {
                $this->languages[$elem36] = true;
              } else {
                $this->languages []= $elem36;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::SET) {
            $this->operatingSystems = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readSetBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $xfer += $input->readString($elem42);
              if (is_scalar($elem42)) {
                $this->operatingSystems[$elem42] = true;
              } else {
                $this->operatingSystems []= $elem42;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 65:
          if ($ftype == TType::SET) {
            $this->mainLicenseIds = array();
            $_size43 = 0;
            $_etype46 = 0;
            $xfer += $input->readSetBegin($_etype46, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $elem48 = null;
              $xfer += $input->readString($elem48);
              if (is_scalar($elem48)) {
                $this->mainLicenseIds[$elem48] = true;
              } else {
                $this->mainLicenseIds []= $elem48;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 66:
          if ($ftype == TType::SET) {
            $this->mainLicenseNames = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readSetBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $xfer += $input->readString($elem54);
              if (is_scalar($elem54)) {
                $this->mainLicenseNames[$elem54] = true;
              } else {
                $this->mainLicenseNames []= $elem54;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 80:
          if ($ftype == TType::MAP) {
            $this->releaseIdToRelationship = array();
            $_size55 = 0;
            $_ktype56 = 0;
            $_vtype57 = 0;
            $xfer += $input->readMapBegin($_ktype56, $_vtype57, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $key60 = '';
              $val61 = 0;
              $xfer += $input->readString($key60);
              $xfer += $input->readI32($val61);
              $this->releaseIdToRelationship[$key60] = $val61;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 90:
          if ($ftype == TType::STRUCT) {
            $this->documentState = new \sw360\thrift\DocumentState();
            $xfer += $this->documentState->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 200:
          if ($ftype == TType::MAP) {
            $this->permissions = array();
            $_size62 = 0;
            $_ktype63 = 0;
            $_vtype64 = 0;
            $xfer += $input->readMapBegin($_ktype63, $_vtype64, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $key67 = 0;
              $val68 = false;
              $xfer += $input->readI32($key67);
              $xfer += $input->readBool($val68);
              $this->permissions[$key67] = $val68;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Release');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpeid !== null) {
      $xfer += $output->writeFieldBegin('cpeid', TType::STRING, 4);
      $xfer += $output->writeString($this->cpeid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 6);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->componentId !== null) {
      $xfer += $output->writeFieldBegin('componentId', TType::STRING, 7);
      $xfer += $output->writeString($this->componentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releaseDate !== null) {
      $xfer += $output->writeFieldBegin('releaseDate', TType::STRING, 8);
      $xfer += $output->writeString($this->releaseDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachments !== null) {
      if (!is_array($this->attachments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attachments', TType::SET, 10);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->attachments));
        {
          foreach ($this->attachments as $iter69 => $iter70)
          {
            if (is_scalar($iter70)) {
            $xfer += $iter69->write($output);
            } else {
            $xfer += $iter70->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdOn !== null) {
      $xfer += $output->writeFieldBegin('createdOn', TType::STRING, 11);
      $xfer += $output->writeString($this->createdOn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repository !== null) {
      if (!is_object($this->repository)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('repository', TType::STRUCT, 12);
      $xfer += $this->repository->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainlineState !== null) {
      $xfer += $output->writeFieldBegin('mainlineState', TType::I32, 16);
      $xfer += $output->writeI32($this->mainlineState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clearingState !== null) {
      $xfer += $output->writeFieldBegin('clearingState', TType::I32, 17);
      $xfer += $output->writeI32($this->clearingState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fossologyId !== null) {
      $xfer += $output->writeFieldBegin('fossologyId', TType::STRING, 20);
      $xfer += $output->writeString($this->fossologyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clearingTeamToFossologyStatus !== null) {
      if (!is_array($this->clearingTeamToFossologyStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('clearingTeamToFossologyStatus', TType::MAP, 21);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->clearingTeamToFossologyStatus));
        {
          foreach ($this->clearingTeamToFossologyStatus as $kiter71 => $viter72)
          {
            $xfer += $output->writeString($kiter71);
            $xfer += $output->writeI32($viter72);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachmentInFossology !== null) {
      $xfer += $output->writeFieldBegin('attachmentInFossology', TType::STRING, 22);
      $xfer += $output->writeString($this->attachmentInFossology);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdBy !== null) {
      $xfer += $output->writeFieldBegin('createdBy', TType::STRING, 30);
      $xfer += $output->writeString($this->createdBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::SET, 32);
      {
        $output->writeSetBegin(TType::STRING, count($this->contacts));
        {
          foreach ($this->contacts as $iter73 => $iter74)
          {
            if (is_scalar($iter74)) {
            $xfer += $output->writeString($iter73);
            } else {
            $xfer += $output->writeString($iter74);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->moderators !== null) {
      if (!is_array($this->moderators)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('moderators', TType::SET, 34);
      {
        $output->writeSetBegin(TType::STRING, count($this->moderators));
        {
          foreach ($this->moderators as $iter75 => $iter76)
          {
            if (is_scalar($iter76)) {
            $xfer += $output->writeString($iter75);
            } else {
            $xfer += $output->writeString($iter76);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscribers !== null) {
      if (!is_array($this->subscribers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subscribers', TType::SET, 36);
      {
        $output->writeSetBegin(TType::STRING, count($this->subscribers));
        {
          foreach ($this->subscribers as $iter77 => $iter78)
          {
            if (is_scalar($iter78)) {
            $xfer += $output->writeString($iter77);
            } else {
            $xfer += $output->writeString($iter78);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vendor !== null) {
      if (!is_object($this->vendor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vendor', TType::STRUCT, 40);
      $xfer += $this->vendor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vendorId !== null) {
      $xfer += $output->writeFieldBegin('vendorId', TType::STRING, 41);
      $xfer += $output->writeString($this->vendorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clearingInformation !== null) {
      if (!is_object($this->clearingInformation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('clearingInformation', TType::STRUCT, 50);
      $xfer += $this->clearingInformation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->languages !== null) {
      if (!is_array($this->languages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('languages', TType::SET, 51);
      {
        $output->writeSetBegin(TType::STRING, count($this->languages));
        {
          foreach ($this->languages as $iter79 => $iter80)
          {
            if (is_scalar($iter80)) {
            $xfer += $output->writeString($iter79);
            } else {
            $xfer += $output->writeString($iter80);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operatingSystems !== null) {
      if (!is_array($this->operatingSystems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operatingSystems', TType::SET, 53);
      {
        $output->writeSetBegin(TType::STRING, count($this->operatingSystems));
        {
          foreach ($this->operatingSystems as $iter81 => $iter82)
          {
            if (is_scalar($iter82)) {
            $xfer += $output->writeString($iter81);
            } else {
            $xfer += $output->writeString($iter82);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainLicenseIds !== null) {
      if (!is_array($this->mainLicenseIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mainLicenseIds', TType::SET, 65);
      {
        $output->writeSetBegin(TType::STRING, count($this->mainLicenseIds));
        {
          foreach ($this->mainLicenseIds as $iter83 => $iter84)
          {
            if (is_scalar($iter84)) {
            $xfer += $output->writeString($iter83);
            } else {
            $xfer += $output->writeString($iter84);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainLicenseNames !== null) {
      if (!is_array($this->mainLicenseNames)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mainLicenseNames', TType::SET, 66);
      {
        $output->writeSetBegin(TType::STRING, count($this->mainLicenseNames));
        {
          foreach ($this->mainLicenseNames as $iter85 => $iter86)
          {
            if (is_scalar($iter86)) {
            $xfer += $output->writeString($iter85);
            } else {
            $xfer += $output->writeString($iter86);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadurl !== null) {
      $xfer += $output->writeFieldBegin('downloadurl', TType::STRING, 70);
      $xfer += $output->writeString($this->downloadurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releaseIdToRelationship !== null) {
      if (!is_array($this->releaseIdToRelationship)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('releaseIdToRelationship', TType::MAP, 80);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->releaseIdToRelationship));
        {
          foreach ($this->releaseIdToRelationship as $kiter87 => $viter88)
          {
            $xfer += $output->writeString($kiter87);
            $xfer += $output->writeI32($viter88);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->documentState !== null) {
      if (!is_object($this->documentState)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('documentState', TType::STRUCT, 90);
      $xfer += $this->documentState->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissions !== null) {
      if (!is_array($this->permissions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('permissions', TType::MAP, 200);
      {
        $output->writeMapBegin(TType::I32, TType::BOOL, count($this->permissions));
        {
          foreach ($this->permissions as $kiter89 => $viter90)
          {
            $xfer += $output->writeI32($kiter89);
            $xfer += $output->writeBool($viter90);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Component {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "component";
  public $name = null;
  public $description = null;
  public $attachments = null;
  public $createdOn = null;
  public $componentType = null;
  public $createdBy = null;
  public $subscribers = null;
  public $releases = null;
  public $releaseIds = null;
  public $mainLicenseIds = null;
  public $mainLicenseNames = null;
  public $categories = null;
  public $languages = null;
  public $softwarePlatforms = null;
  public $operatingSystems = null;
  public $vendorNames = null;
  public $homepage = null;
  public $mailinglist = null;
  public $wiki = null;
  public $blog = null;
  public $documentState = null;
  public $permissions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'attachments',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\sw360\thrift\attachments\Attachment',
            ),
          ),
        11 => array(
          'var' => 'createdOn',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'componentType',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'createdBy',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'subscribers',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        32 => array(
          'var' => 'releases',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\sw360\thrift\components\Release',
            ),
          ),
        33 => array(
          'var' => 'releaseIds',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        35 => array(
          'var' => 'mainLicenseIds',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        36 => array(
          'var' => 'mainLicenseNames',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        40 => array(
          'var' => 'categories',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        41 => array(
          'var' => 'languages',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        42 => array(
          'var' => 'softwarePlatforms',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        43 => array(
          'var' => 'operatingSystems',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        44 => array(
          'var' => 'vendorNames',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        50 => array(
          'var' => 'homepage',
          'type' => TType::STRING,
          ),
        51 => array(
          'var' => 'mailinglist',
          'type' => TType::STRING,
          ),
        52 => array(
          'var' => 'wiki',
          'type' => TType::STRING,
          ),
        53 => array(
          'var' => 'blog',
          'type' => TType::STRING,
          ),
        70 => array(
          'var' => 'documentState',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\DocumentState',
          ),
        200 => array(
          'var' => 'permissions',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['attachments'])) {
        $this->attachments = $vals['attachments'];
      }
      if (isset($vals['createdOn'])) {
        $this->createdOn = $vals['createdOn'];
      }
      if (isset($vals['componentType'])) {
        $this->componentType = $vals['componentType'];
      }
      if (isset($vals['createdBy'])) {
        $this->createdBy = $vals['createdBy'];
      }
      if (isset($vals['subscribers'])) {
        $this->subscribers = $vals['subscribers'];
      }
      if (isset($vals['releases'])) {
        $this->releases = $vals['releases'];
      }
      if (isset($vals['releaseIds'])) {
        $this->releaseIds = $vals['releaseIds'];
      }
      if (isset($vals['mainLicenseIds'])) {
        $this->mainLicenseIds = $vals['mainLicenseIds'];
      }
      if (isset($vals['mainLicenseNames'])) {
        $this->mainLicenseNames = $vals['mainLicenseNames'];
      }
      if (isset($vals['categories'])) {
        $this->categories = $vals['categories'];
      }
      if (isset($vals['languages'])) {
        $this->languages = $vals['languages'];
      }
      if (isset($vals['softwarePlatforms'])) {
        $this->softwarePlatforms = $vals['softwarePlatforms'];
      }
      if (isset($vals['operatingSystems'])) {
        $this->operatingSystems = $vals['operatingSystems'];
      }
      if (isset($vals['vendorNames'])) {
        $this->vendorNames = $vals['vendorNames'];
      }
      if (isset($vals['homepage'])) {
        $this->homepage = $vals['homepage'];
      }
      if (isset($vals['mailinglist'])) {
        $this->mailinglist = $vals['mailinglist'];
      }
      if (isset($vals['wiki'])) {
        $this->wiki = $vals['wiki'];
      }
      if (isset($vals['blog'])) {
        $this->blog = $vals['blog'];
      }
      if (isset($vals['documentState'])) {
        $this->documentState = $vals['documentState'];
      }
      if (isset($vals['permissions'])) {
        $this->permissions = $vals['permissions'];
      }
    }
  }

  public function getName() {
    return 'Component';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::SET) {
            $this->attachments = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readSetBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $elem96 = new \sw360\thrift\attachments\Attachment();
              $xfer += $elem96->read($input);
              if (is_scalar($elem96)) {
                $this->attachments[$elem96] = true;
              } else {
                $this->attachments []= $elem96;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdOn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->componentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::SET) {
            $this->subscribers = array();
            $_size97 = 0;
            $_etype100 = 0;
            $xfer += $input->readSetBegin($_etype100, $_size97);
            for ($_i101 = 0; $_i101 < $_size97; ++$_i101)
            {
              $elem102 = null;
              $xfer += $input->readString($elem102);
              if (is_scalar($elem102)) {
                $this->subscribers[$elem102] = true;
              } else {
                $this->subscribers []= $elem102;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::LST) {
            $this->releases = array();
            $_size103 = 0;
            $_etype106 = 0;
            $xfer += $input->readListBegin($_etype106, $_size103);
            for ($_i107 = 0; $_i107 < $_size103; ++$_i107)
            {
              $elem108 = null;
              $elem108 = new \sw360\thrift\components\Release();
              $xfer += $elem108->read($input);
              $this->releases []= $elem108;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::SET) {
            $this->releaseIds = array();
            $_size109 = 0;
            $_etype112 = 0;
            $xfer += $input->readSetBegin($_etype112, $_size109);
            for ($_i113 = 0; $_i113 < $_size109; ++$_i113)
            {
              $elem114 = null;
              $xfer += $input->readString($elem114);
              if (is_scalar($elem114)) {
                $this->releaseIds[$elem114] = true;
              } else {
                $this->releaseIds []= $elem114;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::SET) {
            $this->mainLicenseIds = array();
            $_size115 = 0;
            $_etype118 = 0;
            $xfer += $input->readSetBegin($_etype118, $_size115);
            for ($_i119 = 0; $_i119 < $_size115; ++$_i119)
            {
              $elem120 = null;
              $xfer += $input->readString($elem120);
              if (is_scalar($elem120)) {
                $this->mainLicenseIds[$elem120] = true;
              } else {
                $this->mainLicenseIds []= $elem120;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::SET) {
            $this->mainLicenseNames = array();
            $_size121 = 0;
            $_etype124 = 0;
            $xfer += $input->readSetBegin($_etype124, $_size121);
            for ($_i125 = 0; $_i125 < $_size121; ++$_i125)
            {
              $elem126 = null;
              $xfer += $input->readString($elem126);
              if (is_scalar($elem126)) {
                $this->mainLicenseNames[$elem126] = true;
              } else {
                $this->mainLicenseNames []= $elem126;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::SET) {
            $this->categories = array();
            $_size127 = 0;
            $_etype130 = 0;
            $xfer += $input->readSetBegin($_etype130, $_size127);
            for ($_i131 = 0; $_i131 < $_size127; ++$_i131)
            {
              $elem132 = null;
              $xfer += $input->readString($elem132);
              if (is_scalar($elem132)) {
                $this->categories[$elem132] = true;
              } else {
                $this->categories []= $elem132;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::SET) {
            $this->languages = array();
            $_size133 = 0;
            $_etype136 = 0;
            $xfer += $input->readSetBegin($_etype136, $_size133);
            for ($_i137 = 0; $_i137 < $_size133; ++$_i137)
            {
              $elem138 = null;
              $xfer += $input->readString($elem138);
              if (is_scalar($elem138)) {
                $this->languages[$elem138] = true;
              } else {
                $this->languages []= $elem138;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::SET) {
            $this->softwarePlatforms = array();
            $_size139 = 0;
            $_etype142 = 0;
            $xfer += $input->readSetBegin($_etype142, $_size139);
            for ($_i143 = 0; $_i143 < $_size139; ++$_i143)
            {
              $elem144 = null;
              $xfer += $input->readString($elem144);
              if (is_scalar($elem144)) {
                $this->softwarePlatforms[$elem144] = true;
              } else {
                $this->softwarePlatforms []= $elem144;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::SET) {
            $this->operatingSystems = array();
            $_size145 = 0;
            $_etype148 = 0;
            $xfer += $input->readSetBegin($_etype148, $_size145);
            for ($_i149 = 0; $_i149 < $_size145; ++$_i149)
            {
              $elem150 = null;
              $xfer += $input->readString($elem150);
              if (is_scalar($elem150)) {
                $this->operatingSystems[$elem150] = true;
              } else {
                $this->operatingSystems []= $elem150;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::SET) {
            $this->vendorNames = array();
            $_size151 = 0;
            $_etype154 = 0;
            $xfer += $input->readSetBegin($_etype154, $_size151);
            for ($_i155 = 0; $_i155 < $_size151; ++$_i155)
            {
              $elem156 = null;
              $xfer += $input->readString($elem156);
              if (is_scalar($elem156)) {
                $this->vendorNames[$elem156] = true;
              } else {
                $this->vendorNames []= $elem156;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->homepage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mailinglist);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wiki);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == TType::STRUCT) {
            $this->documentState = new \sw360\thrift\DocumentState();
            $xfer += $this->documentState->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 200:
          if ($ftype == TType::MAP) {
            $this->permissions = array();
            $_size157 = 0;
            $_ktype158 = 0;
            $_vtype159 = 0;
            $xfer += $input->readMapBegin($_ktype158, $_vtype159, $_size157);
            for ($_i161 = 0; $_i161 < $_size157; ++$_i161)
            {
              $key162 = 0;
              $val163 = false;
              $xfer += $input->readI32($key162);
              $xfer += $input->readBool($val163);
              $this->permissions[$key162] = $val163;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Component');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 6);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachments !== null) {
      if (!is_array($this->attachments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attachments', TType::SET, 10);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->attachments));
        {
          foreach ($this->attachments as $iter164 => $iter165)
          {
            if (is_scalar($iter165)) {
            $xfer += $iter164->write($output);
            } else {
            $xfer += $iter165->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdOn !== null) {
      $xfer += $output->writeFieldBegin('createdOn', TType::STRING, 11);
      $xfer += $output->writeString($this->createdOn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->componentType !== null) {
      $xfer += $output->writeFieldBegin('componentType', TType::I32, 12);
      $xfer += $output->writeI32($this->componentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdBy !== null) {
      $xfer += $output->writeFieldBegin('createdBy', TType::STRING, 20);
      $xfer += $output->writeString($this->createdBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscribers !== null) {
      if (!is_array($this->subscribers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subscribers', TType::SET, 24);
      {
        $output->writeSetBegin(TType::STRING, count($this->subscribers));
        {
          foreach ($this->subscribers as $iter166 => $iter167)
          {
            if (is_scalar($iter167)) {
            $xfer += $output->writeString($iter166);
            } else {
            $xfer += $output->writeString($iter167);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releases !== null) {
      if (!is_array($this->releases)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('releases', TType::LST, 32);
      {
        $output->writeListBegin(TType::STRUCT, count($this->releases));
        {
          foreach ($this->releases as $iter168)
          {
            $xfer += $iter168->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releaseIds !== null) {
      if (!is_array($this->releaseIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('releaseIds', TType::SET, 33);
      {
        $output->writeSetBegin(TType::STRING, count($this->releaseIds));
        {
          foreach ($this->releaseIds as $iter169 => $iter170)
          {
            if (is_scalar($iter170)) {
            $xfer += $output->writeString($iter169);
            } else {
            $xfer += $output->writeString($iter170);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainLicenseIds !== null) {
      if (!is_array($this->mainLicenseIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mainLicenseIds', TType::SET, 35);
      {
        $output->writeSetBegin(TType::STRING, count($this->mainLicenseIds));
        {
          foreach ($this->mainLicenseIds as $iter171 => $iter172)
          {
            if (is_scalar($iter172)) {
            $xfer += $output->writeString($iter171);
            } else {
            $xfer += $output->writeString($iter172);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainLicenseNames !== null) {
      if (!is_array($this->mainLicenseNames)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mainLicenseNames', TType::SET, 36);
      {
        $output->writeSetBegin(TType::STRING, count($this->mainLicenseNames));
        {
          foreach ($this->mainLicenseNames as $iter173 => $iter174)
          {
            if (is_scalar($iter174)) {
            $xfer += $output->writeString($iter173);
            } else {
            $xfer += $output->writeString($iter174);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categories !== null) {
      if (!is_array($this->categories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categories', TType::SET, 40);
      {
        $output->writeSetBegin(TType::STRING, count($this->categories));
        {
          foreach ($this->categories as $iter175 => $iter176)
          {
            if (is_scalar($iter176)) {
            $xfer += $output->writeString($iter175);
            } else {
            $xfer += $output->writeString($iter176);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->languages !== null) {
      if (!is_array($this->languages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('languages', TType::SET, 41);
      {
        $output->writeSetBegin(TType::STRING, count($this->languages));
        {
          foreach ($this->languages as $iter177 => $iter178)
          {
            if (is_scalar($iter178)) {
            $xfer += $output->writeString($iter177);
            } else {
            $xfer += $output->writeString($iter178);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->softwarePlatforms !== null) {
      if (!is_array($this->softwarePlatforms)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('softwarePlatforms', TType::SET, 42);
      {
        $output->writeSetBegin(TType::STRING, count($this->softwarePlatforms));
        {
          foreach ($this->softwarePlatforms as $iter179 => $iter180)
          {
            if (is_scalar($iter180)) {
            $xfer += $output->writeString($iter179);
            } else {
            $xfer += $output->writeString($iter180);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operatingSystems !== null) {
      if (!is_array($this->operatingSystems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operatingSystems', TType::SET, 43);
      {
        $output->writeSetBegin(TType::STRING, count($this->operatingSystems));
        {
          foreach ($this->operatingSystems as $iter181 => $iter182)
          {
            if (is_scalar($iter182)) {
            $xfer += $output->writeString($iter181);
            } else {
            $xfer += $output->writeString($iter182);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vendorNames !== null) {
      if (!is_array($this->vendorNames)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vendorNames', TType::SET, 44);
      {
        $output->writeSetBegin(TType::STRING, count($this->vendorNames));
        {
          foreach ($this->vendorNames as $iter183 => $iter184)
          {
            if (is_scalar($iter184)) {
            $xfer += $output->writeString($iter183);
            } else {
            $xfer += $output->writeString($iter184);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->homepage !== null) {
      $xfer += $output->writeFieldBegin('homepage', TType::STRING, 50);
      $xfer += $output->writeString($this->homepage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mailinglist !== null) {
      $xfer += $output->writeFieldBegin('mailinglist', TType::STRING, 51);
      $xfer += $output->writeString($this->mailinglist);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wiki !== null) {
      $xfer += $output->writeFieldBegin('wiki', TType::STRING, 52);
      $xfer += $output->writeString($this->wiki);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blog !== null) {
      $xfer += $output->writeFieldBegin('blog', TType::STRING, 53);
      $xfer += $output->writeString($this->blog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->documentState !== null) {
      if (!is_object($this->documentState)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('documentState', TType::STRUCT, 70);
      $xfer += $this->documentState->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissions !== null) {
      if (!is_array($this->permissions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('permissions', TType::MAP, 200);
      {
        $output->writeMapBegin(TType::I32, TType::BOOL, count($this->permissions));
        {
          foreach ($this->permissions as $kiter185 => $viter186)
          {
            $xfer += $output->writeI32($kiter185);
            $xfer += $output->writeBool($viter186);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReleaseClearingStateSummary {
  static $_TSPEC;

  public $newRelease = null;
  public $underClearing = null;
  public $underClearingByProjectTeam = null;
  public $reportAvailable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'newRelease',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'underClearing',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'underClearingByProjectTeam',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reportAvailable',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['newRelease'])) {
        $this->newRelease = $vals['newRelease'];
      }
      if (isset($vals['underClearing'])) {
        $this->underClearing = $vals['underClearing'];
      }
      if (isset($vals['underClearingByProjectTeam'])) {
        $this->underClearingByProjectTeam = $vals['underClearingByProjectTeam'];
      }
      if (isset($vals['reportAvailable'])) {
        $this->reportAvailable = $vals['reportAvailable'];
      }
    }
  }

  public function getName() {
    return 'ReleaseClearingStateSummary';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->newRelease);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->underClearing);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->underClearingByProjectTeam);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reportAvailable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReleaseClearingStateSummary');
    if ($this->newRelease !== null) {
      $xfer += $output->writeFieldBegin('newRelease', TType::I32, 1);
      $xfer += $output->writeI32($this->newRelease);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->underClearing !== null) {
      $xfer += $output->writeFieldBegin('underClearing', TType::I32, 2);
      $xfer += $output->writeI32($this->underClearing);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->underClearingByProjectTeam !== null) {
      $xfer += $output->writeFieldBegin('underClearingByProjectTeam', TType::I32, 3);
      $xfer += $output->writeI32($this->underClearingByProjectTeam);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportAvailable !== null) {
      $xfer += $output->writeFieldBegin('reportAvailable', TType::I32, 4);
      $xfer += $output->writeI32($this->reportAvailable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReleaseLink {
  static $_TSPEC;

  public $id = null;
  public $vendor = null;
  public $name = null;
  public $version = null;
  public $comment = null;
  public $releaseRelationship = null;
  public $depth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'vendor',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'releaseRelationship',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'depth',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['vendor'])) {
        $this->vendor = $vals['vendor'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['releaseRelationship'])) {
        $this->releaseRelationship = $vals['releaseRelationship'];
      }
      if (isset($vals['depth'])) {
        $this->depth = $vals['depth'];
      }
    }
  }

  public function getName() {
    return 'ReleaseLink';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vendor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->releaseRelationship);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->depth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReleaseLink');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vendor !== null) {
      $xfer += $output->writeFieldBegin('vendor', TType::STRING, 2);
      $xfer += $output->writeString($this->vendor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 10);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 15);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->releaseRelationship !== null) {
      $xfer += $output->writeFieldBegin('releaseRelationship', TType::I32, 16);
      $xfer += $output->writeI32($this->releaseRelationship);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->depth !== null) {
      $xfer += $output->writeFieldBegin('depth', TType::I32, 25);
      $xfer += $output->writeI32($this->depth);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


