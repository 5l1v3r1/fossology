<?php
namespace sw360\thrift\licenses;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Obligation {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "obligation";
  public $name = null;
  public $obligationId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'obligationId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['obligationId'])) {
        $this->obligationId = $vals['obligationId'];
      }
    }
  }

  public function getName() {
    return 'Obligation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->obligationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Obligation');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obligationId !== null) {
      $xfer += $output->writeFieldBegin('obligationId', TType::I32, 6);
      $xfer += $output->writeI32($this->obligationId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Todo {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "todo";
  public $text = null;
  public $whitelist = null;
  public $developement = null;
  public $distribution = null;
  public $obligations = null;
  public $obligationDatabaseIds = null;
  public $todoId = null;
  public $developmentString = null;
  public $distributionString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'whitelist',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'developement',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'distribution',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'obligations',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\sw360\thrift\licenses\Obligation',
            ),
          ),
        9 => array(
          'var' => 'obligationDatabaseIds',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'todoId',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'developmentString',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'distributionString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['whitelist'])) {
        $this->whitelist = $vals['whitelist'];
      }
      if (isset($vals['developement'])) {
        $this->developement = $vals['developement'];
      }
      if (isset($vals['distribution'])) {
        $this->distribution = $vals['distribution'];
      }
      if (isset($vals['obligations'])) {
        $this->obligations = $vals['obligations'];
      }
      if (isset($vals['obligationDatabaseIds'])) {
        $this->obligationDatabaseIds = $vals['obligationDatabaseIds'];
      }
      if (isset($vals['todoId'])) {
        $this->todoId = $vals['todoId'];
      }
      if (isset($vals['developmentString'])) {
        $this->developmentString = $vals['developmentString'];
      }
      if (isset($vals['distributionString'])) {
        $this->distributionString = $vals['distributionString'];
      }
    }
  }

  public function getName() {
    return 'Todo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::SET) {
            $this->whitelist = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              if (is_scalar($elem5)) {
                $this->whitelist[$elem5] = true;
              } else {
                $this->whitelist []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->developement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->distribution);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->obligations = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \sw360\thrift\licenses\Obligation();
              $xfer += $elem11->read($input);
              $this->obligations []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::SET) {
            $this->obligationDatabaseIds = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readSetBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readString($elem17);
              if (is_scalar($elem17)) {
                $this->obligationDatabaseIds[$elem17] = true;
              } else {
                $this->obligationDatabaseIds []= $elem17;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->todoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->developmentString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->distributionString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Todo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 4);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->whitelist !== null) {
      if (!is_array($this->whitelist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('whitelist', TType::SET, 5);
      {
        $output->writeSetBegin(TType::STRING, count($this->whitelist));
        {
          foreach ($this->whitelist as $iter18 => $iter19)
          {
            if (is_scalar($iter19)) {
            $xfer += $output->writeString($iter18);
            } else {
            $xfer += $output->writeString($iter19);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developement !== null) {
      $xfer += $output->writeFieldBegin('developement', TType::BOOL, 6);
      $xfer += $output->writeBool($this->developement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distribution !== null) {
      $xfer += $output->writeFieldBegin('distribution', TType::BOOL, 7);
      $xfer += $output->writeBool($this->distribution);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obligations !== null) {
      if (!is_array($this->obligations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('obligations', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->obligations));
        {
          foreach ($this->obligations as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obligationDatabaseIds !== null) {
      if (!is_array($this->obligationDatabaseIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('obligationDatabaseIds', TType::SET, 9);
      {
        $output->writeSetBegin(TType::STRING, count($this->obligationDatabaseIds));
        {
          foreach ($this->obligationDatabaseIds as $iter21 => $iter22)
          {
            if (is_scalar($iter22)) {
            $xfer += $output->writeString($iter21);
            } else {
            $xfer += $output->writeString($iter22);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->todoId !== null) {
      $xfer += $output->writeFieldBegin('todoId', TType::I32, 10);
      $xfer += $output->writeI32($this->todoId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developmentString !== null) {
      $xfer += $output->writeFieldBegin('developmentString', TType::STRING, 15);
      $xfer += $output->writeString($this->developmentString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distributionString !== null) {
      $xfer += $output->writeFieldBegin('distributionString', TType::STRING, 16);
      $xfer += $output->writeString($this->distributionString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RiskCategory {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "riskCategory";
  public $riskCategoryId = null;
  public $text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'riskCategoryId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['riskCategoryId'])) {
        $this->riskCategoryId = $vals['riskCategoryId'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
    }
  }

  public function getName() {
    return 'RiskCategory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->riskCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RiskCategory');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->riskCategoryId !== null) {
      $xfer += $output->writeFieldBegin('riskCategoryId', TType::I32, 5);
      $xfer += $output->writeI32($this->riskCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 6);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Risk {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "risk";
  public $riskId = null;
  public $text = null;
  public $category = null;
  public $riskCategoryDatabaseId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'riskId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'category',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\licenses\RiskCategory',
          ),
        8 => array(
          'var' => 'riskCategoryDatabaseId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['riskId'])) {
        $this->riskId = $vals['riskId'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['riskCategoryDatabaseId'])) {
        $this->riskCategoryDatabaseId = $vals['riskCategoryDatabaseId'];
      }
    }
  }

  public function getName() {
    return 'Risk';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->riskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->category = new \sw360\thrift\licenses\RiskCategory();
            $xfer += $this->category->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->riskCategoryDatabaseId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Risk');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->riskId !== null) {
      $xfer += $output->writeFieldBegin('riskId', TType::I32, 5);
      $xfer += $output->writeI32($this->riskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 6);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      if (!is_object($this->category)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('category', TType::STRUCT, 7);
      $xfer += $this->category->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->riskCategoryDatabaseId !== null) {
      $xfer += $output->writeFieldBegin('riskCategoryDatabaseId', TType::STRING, 8);
      $xfer += $output->writeString($this->riskCategoryDatabaseId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LicenseType {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "licenseType";
  public $licenseTypeId = null;
  public $licenseType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'licenseTypeId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'licenseType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['licenseTypeId'])) {
        $this->licenseTypeId = $vals['licenseTypeId'];
      }
      if (isset($vals['licenseType'])) {
        $this->licenseType = $vals['licenseType'];
      }
    }
  }

  public function getName() {
    return 'LicenseType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->licenseTypeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->licenseType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LicenseType');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->licenseTypeId !== null) {
      $xfer += $output->writeFieldBegin('licenseTypeId', TType::I32, 5);
      $xfer += $output->writeI32($this->licenseTypeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->licenseType !== null) {
      $xfer += $output->writeFieldBegin('licenseType', TType::STRING, 6);
      $xfer += $output->writeString($this->licenseType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class License {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "license";
  public $shortname = null;
  public $fullname = null;
  public $licenseType = null;
  public $licenseTypeDatabaseId = null;
  public $GPLv2Compat = null;
  public $GPLv3Compat = null;
  public $reviewdate = null;
  public $todos = null;
  public $todoDatabaseIds = null;
  public $risks = null;
  public $riskDatabaseIds = null;
  public $text = null;
  public $permissions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'shortname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'fullname',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'licenseType',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\licenses\LicenseType',
          ),
        7 => array(
          'var' => 'licenseTypeDatabaseId',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'GPLv2Compat',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'GPLv3Compat',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'reviewdate',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'todos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\sw360\thrift\licenses\Todo',
            ),
          ),
        21 => array(
          'var' => 'todoDatabaseIds',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        22 => array(
          'var' => 'risks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\sw360\thrift\licenses\Risk',
            ),
          ),
        23 => array(
          'var' => 'riskDatabaseIds',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        25 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        200 => array(
          'var' => 'permissions',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['shortname'])) {
        $this->shortname = $vals['shortname'];
      }
      if (isset($vals['fullname'])) {
        $this->fullname = $vals['fullname'];
      }
      if (isset($vals['licenseType'])) {
        $this->licenseType = $vals['licenseType'];
      }
      if (isset($vals['licenseTypeDatabaseId'])) {
        $this->licenseTypeDatabaseId = $vals['licenseTypeDatabaseId'];
      }
      if (isset($vals['GPLv2Compat'])) {
        $this->GPLv2Compat = $vals['GPLv2Compat'];
      }
      if (isset($vals['GPLv3Compat'])) {
        $this->GPLv3Compat = $vals['GPLv3Compat'];
      }
      if (isset($vals['reviewdate'])) {
        $this->reviewdate = $vals['reviewdate'];
      }
      if (isset($vals['todos'])) {
        $this->todos = $vals['todos'];
      }
      if (isset($vals['todoDatabaseIds'])) {
        $this->todoDatabaseIds = $vals['todoDatabaseIds'];
      }
      if (isset($vals['risks'])) {
        $this->risks = $vals['risks'];
      }
      if (isset($vals['riskDatabaseIds'])) {
        $this->riskDatabaseIds = $vals['riskDatabaseIds'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['permissions'])) {
        $this->permissions = $vals['permissions'];
      }
    }
  }

  public function getName() {
    return 'License';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shortname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fullname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->licenseType = new \sw360\thrift\licenses\LicenseType();
            $xfer += $this->licenseType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->licenseTypeDatabaseId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->GPLv2Compat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->GPLv3Compat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->todos = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $elem28 = new \sw360\thrift\licenses\Todo();
              $xfer += $elem28->read($input);
              $this->todos []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::SET) {
            $this->todoDatabaseIds = array();
            $_size29 = 0;
            $_etype32 = 0;
            $xfer += $input->readSetBegin($_etype32, $_size29);
            for ($_i33 = 0; $_i33 < $_size29; ++$_i33)
            {
              $elem34 = null;
              $xfer += $input->readString($elem34);
              if (is_scalar($elem34)) {
                $this->todoDatabaseIds[$elem34] = true;
              } else {
                $this->todoDatabaseIds []= $elem34;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->risks = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \sw360\thrift\licenses\Risk();
              $xfer += $elem40->read($input);
              $this->risks []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::SET) {
            $this->riskDatabaseIds = array();
            $_size41 = 0;
            $_etype44 = 0;
            $xfer += $input->readSetBegin($_etype44, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $elem46 = null;
              $xfer += $input->readString($elem46);
              if (is_scalar($elem46)) {
                $this->riskDatabaseIds[$elem46] = true;
              } else {
                $this->riskDatabaseIds []= $elem46;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 200:
          if ($ftype == TType::MAP) {
            $this->permissions = array();
            $_size47 = 0;
            $_ktype48 = 0;
            $_vtype49 = 0;
            $xfer += $input->readMapBegin($_ktype48, $_vtype49, $_size47);
            for ($_i51 = 0; $_i51 < $_size47; ++$_i51)
            {
              $key52 = 0;
              $val53 = false;
              $xfer += $input->readI32($key52);
              $xfer += $input->readBool($val53);
              $this->permissions[$key52] = $val53;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('License');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shortname !== null) {
      $xfer += $output->writeFieldBegin('shortname', TType::STRING, 4);
      $xfer += $output->writeString($this->shortname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fullname !== null) {
      $xfer += $output->writeFieldBegin('fullname', TType::STRING, 5);
      $xfer += $output->writeString($this->fullname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->licenseType !== null) {
      if (!is_object($this->licenseType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('licenseType', TType::STRUCT, 6);
      $xfer += $this->licenseType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->licenseTypeDatabaseId !== null) {
      $xfer += $output->writeFieldBegin('licenseTypeDatabaseId', TType::STRING, 7);
      $xfer += $output->writeString($this->licenseTypeDatabaseId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GPLv2Compat !== null) {
      $xfer += $output->writeFieldBegin('GPLv2Compat', TType::BOOL, 10);
      $xfer += $output->writeBool($this->GPLv2Compat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GPLv3Compat !== null) {
      $xfer += $output->writeFieldBegin('GPLv3Compat', TType::BOOL, 11);
      $xfer += $output->writeBool($this->GPLv3Compat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewdate !== null) {
      $xfer += $output->writeFieldBegin('reviewdate', TType::STRING, 12);
      $xfer += $output->writeString($this->reviewdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->todos !== null) {
      if (!is_array($this->todos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('todos', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRUCT, count($this->todos));
        {
          foreach ($this->todos as $iter54)
          {
            $xfer += $iter54->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->todoDatabaseIds !== null) {
      if (!is_array($this->todoDatabaseIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('todoDatabaseIds', TType::SET, 21);
      {
        $output->writeSetBegin(TType::STRING, count($this->todoDatabaseIds));
        {
          foreach ($this->todoDatabaseIds as $iter55 => $iter56)
          {
            if (is_scalar($iter56)) {
            $xfer += $output->writeString($iter55);
            } else {
            $xfer += $output->writeString($iter56);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->risks !== null) {
      if (!is_array($this->risks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('risks', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->risks));
        {
          foreach ($this->risks as $iter57)
          {
            $xfer += $iter57->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->riskDatabaseIds !== null) {
      if (!is_array($this->riskDatabaseIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('riskDatabaseIds', TType::SET, 23);
      {
        $output->writeSetBegin(TType::STRING, count($this->riskDatabaseIds));
        {
          foreach ($this->riskDatabaseIds as $iter58 => $iter59)
          {
            if (is_scalar($iter59)) {
            $xfer += $output->writeString($iter58);
            } else {
            $xfer += $output->writeString($iter59);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 25);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissions !== null) {
      if (!is_array($this->permissions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('permissions', TType::MAP, 200);
      {
        $output->writeMapBegin(TType::I32, TType::BOOL, count($this->permissions));
        {
          foreach ($this->permissions as $kiter60 => $viter61)
          {
            $xfer += $output->writeI32($kiter60);
            $xfer += $output->writeBool($viter61);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


