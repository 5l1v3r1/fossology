<?php
namespace sw360\thrift\moderation;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class DocumentType {
  const COMPONENT = 1;
  const RELEASE = 2;
  const PROJECT = 3;
  static public $__names = array(
    1 => 'COMPONENT',
    2 => 'RELEASE',
    3 => 'PROJECT',
  );
}

class ModerationRequest {
  static $_TSPEC;

  public $id = null;
  public $revision = null;
  public $type = "moderation";
  public $timestamp = null;
  public $documentId = null;
  public $documentType = null;
  public $requestingUser = null;
  public $moderators = null;
  public $documentName = null;
  public $moderationState = null;
  public $reviewer = null;
  public $requestDocumentDelete = null;
  public $component = null;
  public $Release = null;
  public $project = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'revision',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'documentId',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'documentType',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'requestingUser',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'moderators',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        15 => array(
          'var' => 'documentName',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'moderationState',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'reviewer',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'requestDocumentDelete',
          'type' => TType::BOOL,
          ),
        20 => array(
          'var' => 'component',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\components\Component',
          ),
        21 => array(
          'var' => 'Release',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\components\Release',
          ),
        22 => array(
          'var' => 'project',
          'type' => TType::STRUCT,
          'class' => '\sw360\thrift\projects\Project',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['documentId'])) {
        $this->documentId = $vals['documentId'];
      }
      if (isset($vals['documentType'])) {
        $this->documentType = $vals['documentType'];
      }
      if (isset($vals['requestingUser'])) {
        $this->requestingUser = $vals['requestingUser'];
      }
      if (isset($vals['moderators'])) {
        $this->moderators = $vals['moderators'];
      }
      if (isset($vals['documentName'])) {
        $this->documentName = $vals['documentName'];
      }
      if (isset($vals['moderationState'])) {
        $this->moderationState = $vals['moderationState'];
      }
      if (isset($vals['reviewer'])) {
        $this->reviewer = $vals['reviewer'];
      }
      if (isset($vals['requestDocumentDelete'])) {
        $this->requestDocumentDelete = $vals['requestDocumentDelete'];
      }
      if (isset($vals['component'])) {
        $this->component = $vals['component'];
      }
      if (isset($vals['Release'])) {
        $this->Release = $vals['Release'];
      }
      if (isset($vals['project'])) {
        $this->project = $vals['project'];
      }
    }
  }

  public function getName() {
    return 'ModerationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->documentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->documentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestingUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::SET) {
            $this->moderators = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              if (is_scalar($elem5)) {
                $this->moderators[$elem5] = true;
              } else {
                $this->moderators []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->documentName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->moderationState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->requestDocumentDelete);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->component = new \sw360\thrift\components\Component();
            $xfer += $this->component->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->Release = new \sw360\thrift\components\Release();
            $xfer += $this->Release->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRUCT) {
            $this->project = new \sw360\thrift\projects\Project();
            $xfer += $this->project->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ModerationRequest');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::STRING, 2);
      $xfer += $output->writeString($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 10);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->documentId !== null) {
      $xfer += $output->writeFieldBegin('documentId', TType::STRING, 11);
      $xfer += $output->writeString($this->documentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->documentType !== null) {
      $xfer += $output->writeFieldBegin('documentType', TType::I32, 12);
      $xfer += $output->writeI32($this->documentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestingUser !== null) {
      $xfer += $output->writeFieldBegin('requestingUser', TType::STRING, 13);
      $xfer += $output->writeString($this->requestingUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->moderators !== null) {
      if (!is_array($this->moderators)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('moderators', TType::SET, 14);
      {
        $output->writeSetBegin(TType::STRING, count($this->moderators));
        {
          foreach ($this->moderators as $iter6 => $iter7)
          {
            if (is_scalar($iter7)) {
            $xfer += $output->writeString($iter6);
            } else {
            $xfer += $output->writeString($iter7);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->documentName !== null) {
      $xfer += $output->writeFieldBegin('documentName', TType::STRING, 15);
      $xfer += $output->writeString($this->documentName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->moderationState !== null) {
      $xfer += $output->writeFieldBegin('moderationState', TType::I32, 16);
      $xfer += $output->writeI32($this->moderationState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewer !== null) {
      $xfer += $output->writeFieldBegin('reviewer', TType::STRING, 17);
      $xfer += $output->writeString($this->reviewer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestDocumentDelete !== null) {
      $xfer += $output->writeFieldBegin('requestDocumentDelete', TType::BOOL, 18);
      $xfer += $output->writeBool($this->requestDocumentDelete);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->component !== null) {
      if (!is_object($this->component)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('component', TType::STRUCT, 20);
      $xfer += $this->component->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Release !== null) {
      if (!is_object($this->Release)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Release', TType::STRUCT, 21);
      $xfer += $this->Release->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->project !== null) {
      if (!is_object($this->project)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('project', TType::STRUCT, 22);
      $xfer += $this->project->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


