#!/bin/bash
# FOSSology postinstall script
# Copyright (C) 2008 Hewlett-Packard Development Company, L.P.
#
# This script is for things that need to be done on the runtime system
# after we've installed the bits on the filesystem. It needs to be
# idempotent, meaning that running it repeatedly will still do the
# right thing, regardless of the success of previous runs.

# parse options
OPTS=`getopt -o aduseoh --long agent,database,ui,scheduler,everything,overwrite,help -n 'fo-postinstall' -- "$@"`

if [ $? != 0 ]; then
   echo "Bad option specified."
   OPTS="--help"
fi

eval set -- "$OPTS"

# if no options then do everything
if [ "$OPTS" = " --" ]; then
   EVERYTHING=1
fi

while true; do
   case "$1" in
      -a|--agent) AGENT=1; shift;;
      -d|--database) DATABASE=1; shift;;
      -u|--ui) UI=1; shift;;
      -s|--scheduler) SCHEDULER=1; shift;;
      -e|--everything) EVERYTHING=1; shift;;
      -o|--overwrite) OVERWRITE=1; shift;;
      -h|--help)
         echo "Usage: fo-postinstall [options]";
	 echo "  -a or --agent      : agent specific actions"
	 echo "  -d or --database   : database specific actions"
	 echo "  -u or --ui         : ui specific actions"
	 echo "  -s or --scheduler  : scheduler specific actions"
	 echo "  -e or --everything : all actions (default)"
	 echo "  -o or --overwrite  : overwrite config files with new versions"
	 echo "  -h or --help       : this help text"
	 shift;;
      --) shift; break;;
      *) echo "Error: option $1 not recognised"; exit 1;;
   esac
done

if [ $EVERYTHING ]; then
   echo "*** Running postinstall for everything ***"
   AGENT=1
   DATABASE=1
   UI=1
   SCHEDULER=1
fi

# need adduser option

# This must run as root.
if [ `id -u` != "0" ] ; then
  echo "ERROR: fo-postinstall must run as root."
  echo "Aborting."
  exit 1
fi

## variables
if [ -e "{$SYSCONFDIR}/fossology/RepPath.conf" ] ; then
   REPO=`cat {$SYSCONFDIR}/fossology/RepPath.conf`
fi

## create user and group
# These are needed on all system types.
# Because we are doing these by name, in the multi-machine install case
# we may end up with uid/gid being different across machines. This will
# either need to be fixed by hand or with NFSv4 you can use rpc.idmapd
# to do uid/gid mapping. More details will be provided in the multi-machine
# documentation.

# Make sure the user and group exist, if not then create
echo "*** Creating user and group ***"
if grep -q "^{$PROJECTGROUP}:" /etc/group; then
  echo "NOTE: group '{$PROJECTGROUP}' already exists, good."
else
  groupadd "{$PROJECTGROUP}"
  if [ "$?" != "0" ] ; then
    echo "ERROR: Unable to create group '{$PROJECTGROUP}'"
    exit 1
  else
    echo "NOTE: group '{$PROJECTGROUP}' created"
  fi
fi

if grep -q "^{$PROJECTUSER}:" /etc/passwd; then
  echo "NOTE: user '{$PROJECTUSER}' already exists, good."
else
  useradd -c "{$PROJECT}" -g "{$PROJECTGROUP}" -m -s /bin/bash -d "${REPO%/*}" "{$PROJECTUSER}"
  if [ "$?" != "0" ] ; then
    echo "ERROR: Unable to create user '{$PROJECTUSER}'"
    exit 1
  else
    echo "NOTE: user '{$PROJECTUSER}' created"
  fi
fi

## check for existance/ownership/permissions of needed directories
# PROJECTSTATEDIR isn't used yet, but we will probably need it at some point
## PROJECTSTATEDIR is needed in all machine cases
#if [ ! -d "{$PROJECTSTATEDIR}" ] ; then
#  mkdir -p "{$PROJECTSTATEDIR}"
#  chown {$PROJECTUSER}:{$PROJECTGROUP} {$PROJECTSTATEDIR}
#  # FIXME: do we really need setgid?
#  chmod 2770 {$PROJECTSTATEDIR}
#fi

# The repo dir is needed in all cases, but in a multi-machine install it
# will be nfs mounted from the machine with the scheduler, so we should
# really only create it if needed on the scheduler machine
if [ $SCHEDULER ]; then
   echo "*** Making sure repo exists with right ownership and permissions ***"
   if [ ! -d "$REPO" ] ; then
     mkdir -p "$REPO"
     chown {$PROJECTUSER}:{$PROJECTGROUP} $REPO
     # FIXME: do we really need setgid?
     #chmod 2770 $REPO
     chmod 770 $REPO
   fi
fi # end of SCHEDULER

# unfinished beyond this point
echo "Not tested yet, exiting."
exit 0
# everything else is currently code from other places or notes to remind
# me what's left to do, it needs to be rewritten

## Database setup
if [ $DATABASE ]; then
# need a way of determining if a db already exists, if not we create the
# the default one

DBDIR="\$DATADIR/dbconnect"
DBCONF="\$DBDIR/\${PROJECT}"
REPOCONF="\$DATADIR/repository"
SCHEDULERCONF="\$AGENTDATADIR/scheduler.conf"
PROXYCONF="\$AGENTDATADIR/proxy.conf"
#####################################################
if [ ! -d "\$DBDIR" ] ; then
  \$MKDIR -p "\$DBDIR"
fi
if [ ! -f "\$DBCONF" ] ; then
  echo "Creating configration \$DBCONF"
  if [ "\$DEBUG" != "" ] ; then
    echo "dbname=\${PROJECT};" ">" "\$DBCONF"
    echo "host=localhost;" ">>" "\$DBCONF"  # assume DB is local
    echo "user=\$PROJECTUSER;" ">>" "\$DBCONF"
    echo "password=\$PROJECTUSER;" ">>" "\$DBCONF"  # user WILL want to change this
  else
    echo "dbname=\${PROJECT};" > "\$DBCONF"
    echo "host=localhost;" >> "\$DBCONF"  # assume DB is local
    echo "user=\$PROJECTUSER;" >> "\$DBCONF"
    echo "password=\$PROJECTUSER;" >> "\$DBCONF"  # user WILL want to change this
  fi
    echo "Be sure to configure \$DBCONF for your environment."
    CONFIGOK=0
    CONFIGDB=0
else
  echo "Configration \$DBCONF already exists. No change."
fi

fi # end of DATABASE

## Create repository configuration files
# The repository is VERY LARGE.  It can easily be on the order of terabytes.
# Historically, /var is a small partition and a bad place for this.
# /home usually has space, but is not desirable for application data.
# /usr and /etc are intended for read-only mounting.  So this is not idea.
# /srv or /opt is a very good place for it.  But these do not exist on
# every OS.  /srv is standard as of FHS 2.3 (January 2004).
# The solution: put the repository in the project's home directory.
# The admin can always edit \$REPOCONF/RepPath.conf to move it.
# Just be sure to set the permissions and groups correctly!
# And I don't recommend using symlinks just because of the overhead from
# traversing links.

FIXME STOPPED HERE
    echo 'localhost * 00 ff' ">" "\$REPOCONF/Hosts.conf"
  else
    echo 'localhost * 00 ff' > "\$REPOCONF/Hosts.conf"
  fi
  CONFIGOK=0
  CONFIGREPO=0
else
  echo "Configration \$REPOCONF/Hosts.conf already exists. No change."
fi

# Define directory for the repo
REPODIR="\$PROJECTHOME/repository"
if [ ! -f "\$REPOCONF/RepPath.conf" ] ; then
  # Set the repository path to the directory "./repository/" in the
  # user's directory.
  \$DEBUG \$MKDIR -p "\$REPODIR"
  \$DEBUG chown -R "\$PROJECTUSER" "\$REPODIR"
  \$DEBUG chgrp -R "\$PROJECTGROUP" "\$REPODIR"
  \$DEBUG find "\$REPODIR" -type d -exec chmod 2770 '{}' \;
  \$DEBUG find "\$REPODIR" -type f -exec chmod 770 '{}' \;
  if [ "\$DEBUG" != "" ] ; then
    echo "\$REPODIR/" ">" "\$REPOCONF/RepPath.conf"
  else
    echo "\$REPODIR/" > "\$REPOCONF/RepPath.conf"
  fi
  echo "The file \$REPOCONF/RepPath.conf points to the repository."
  echo "  The repository can be a mount point, and should be a large disk space."
  echo "  If you plan to process ISOs, then consider a terabyte of disk or larger."
  CONFIGOK=0
  CONFIGREPO=0
else
  echo "Configration \$REPOCONF/RepPath.conf already exists. No change."
fi

# scheduler config file
if [ ! -f SYSCONFDIR/scheduler.conf -o "$OVERWRITE" ] ; then
	mkdir -p SYSCONFDIR
	BINDIR/fo-mkschedconf -o SYSCONFDIR/scheduler.conf -L
	echo "WARNING: default SYSCONFDIR/scheduler.conf created."
	echo "  Please check that is it correct for your environment or"
	echo "  create a different one with fo-mkschedconf."
else
	echo "WARNING: SYSCONFDIR/scheduler.conf already exists,"
	echo "  consider checking or recreating it with fo-mkschedconf."
fi

## Create the License.bsam file

# clean up licenses before recreating
rm -rf "AGENTDATADIR/licenses"

## This requires DB access and everything must be installed first.
echo "# Checking database connectivity"
\${AGENTTESTDDIR}/dbcheck
if [ \$? == 0 ] ; then
  \${AGENTTESTDDIR}/dbinit \${AGENTTESTDDIR}/dbinit.sql
  if [ \$? != 0 ] ; then
    echo "ERROR: Database failed during configuration.\n"
    exit 1
  fi
  if [ \$INSTALLLICENSES == 1 ] ; then
    if [ ! -d "\${AGENTDATADIR}/licenses" ] ; then
      echo "ERROR: License directory (\${AGENTDATADIR}/licenses) does not exist.  Use 'install.sh -f'\n"
      exit 1
    fi
    echo "# Adding licenses to database"
    (
    # remove the old file
    \$DEBUG rm -f \${AGENTDATADIR}/License.bsam.new 2>/dev/null
    cd \${AGENTDATADIR}/licenses
    find . -type f | grep -v "\.meta" | sed -e 's@^./@@' | while read i ; do
      echo "Processing \$i"
      if [ -f "\$i.meta" ] ; then
        \$DEBUG \${AGENTDIR}/Filter_License -Q -O -M "\$i.meta" "\$i" >> \${AGENTDATADIR}/License.bsam.new
      else
        \$DEBUG \${AGENTDIR}/Filter_License -Q -O "\$i" >> \${AGENTDATADIR}/License.bsam.new
      fi
      if [ "\$DEBUG" == "" ] && [ "\$?" != "0" ] ; then
	echo "ERROR processing license."
	exit 1
      fi
    done
    # Make sure the file is valid
    \$DEBUG \${AGENTDIR}/bsam-engine -t "\${AGENTDATADIR}/License.bsam.new"
    if [ "\$?" != "0" ] ; then
	echo "ERROR processing licenses."
	echo "  Please remove \${AGENTDATADIR}/License.bsam.new"
	echo "  and \${AGENTDATADIR}/License.bsam,"
	echo "  then re-run the install"
	exit 1
    fi
    \$DEBUG rm -f \${AGENTDATADIR}/License.bsam 2>/dev/null
    \$DEBUG mv \${AGENTDATADIR}/License.bsam.new \${AGENTDATADIR}/License.bsam 2>/dev/null
    )
    chown \$PROJECTUSER:\$PROJECTGROUP \${AGENTDATADIR}/License.bsam
    chmod 640 \${AGENTDATADIR}/License.bsam
  else
    echo "# Skipping licenses"
  fi
else
  echo "ERROR: Database not configured."
  echo "  Check \$DBCONF then re-run the install."
  exit 1
fi
fi # if PLACECONFIG

#####################################################
# See if Web server (www-data) exists.  If so add him to the group.
grep -q "^www-data:" /etc/group
if [ "\$?" == 0 ] ; then
  echo "# Adding user www-data to group \$PROJECTGROUP"
  WEBGROUPS=\`groups www-data 2>/dev/null | sed -e 's/.*: //' -e 's/ /,/g'\`
  if [ "\$WEBGROUPS" != "" ] ; then
    WEBGROUPS="\$WEBGROUPS,\$PROJECTGROUP"
  else
    WEBGROUPS="\$PROJECTGROUP"
  fi
  \$DEBUG usermod -G \$WEBGROUPS www-data
fi

#####################################################
# Initialize all agents
echo "# Initializing agents"
for i in bsam-engine engine-shell filter_clean Filter_License mimetype pkgmetagetta scheduler specagent ununpack wget_agent ; do
  echo "  Initializing \$i"
  \${AGENTDIR}/\$i -i
  if [ "\$?" != 0 ] ; then
    echo "ERROR: Failed to initialize database for agent \$i"
    exit 1
  fi
done

#####################################################

echo "# Automated installation completed"

# Additional instructions
echo "Be sure to:"
echo "  + Install PHP5"
echo "  + Configure your web server so \$WEBDIR"
echo "    is used for the user interface."
echo "  + Make sure your web server user is in group \$PROJECTUSER in /etc/group"
echo "    then restart your web server so it runs with the new group access."
echo "  + Double check the configuration in the following files and directories:"
echo "    \$DBCONF"
echo "    \$REPOCONF"
echo "    \$SCHEDULERCONF"
echo "    \$PROXYCONF"

EOF



# touch the ui init semaphore
INIT=WEBDIR/init.ui
touch $INIT
chown fossy:fossy $INIT
